import numpy as np
import matplotlib.pyplot as plt

def condition_1(c, M, pr, ci, Mi, pi):
    return c * M * pr > ci * Mi * pi

def condition_2(c, M, pr, ci, Mi, pi, tauv, vth, k, ki):
    return k*ki*(np.sqrt(ci*Mi*pi)+np.sqrt(c*M*pr))**2/(ki*pr-k*pi) > vth/tauv

def condition_3(c, M, k, ci, Mi, ki):
    return ci*ki**2*Mi*pr>c*k**2*M*pi

def condition_4(c, M, k, ci, Mi, ki, vth, tauv):
    return ci*ki*Mi>c*k*M-vth/tauv

def compute_plot_data(ce,ci,pr,pi,Me,Mi,tauv,vth):
    kmax=10
    kimax=25
    k_values, ki_values = np.meshgrid(np.linspace(0, kmax, 1000), np.linspace(0, kimax, 1000))

    plot_data_1 = condition_1(c, M, pr, ci, Mi, pi)
    plot_data_2 = condition_2(c, M, pr, ci, Mi, pi, tauv, vth, k_values, ki_values)
    plot_data_3 = condition_3(c, M, k_values, ci, Mi, ki_values) # derivitive < 0 for infinite case
# =============================================================================
#     plot_data_4 = condition_4(c, M, k_values, ci, Mi, ki_values, vth, tauv)
# =============================================================================

    # Find the intersection of the three conditions
    intersection_data = plot_data_1 & plot_data_2 & plot_data_3
# =============================================================================
#     intersection_data = plot_data_1 & plot_data_2 & plot_data_4
# =============================================================================
# =============================================================================
#     intersection_data = plot_data_1 & plot_data_2 & plot_data_4 & plot_data_5
# =============================================================================

    return k_values, ki_values, intersection_data

pr = 0.3 # 0.1
pi = 0.1 # 0.001
M = 40 # 25
Mi = 25 # 100
c = 0.02 # 0.01
ci = 0.001 # 0.04
tauv = 0.05# 1
vth = 0.2 # 0.2

# Plot the contours of f(x, y) = c1 and g(x, y) = c2 on the same figure

k_values, ki_values, intersection_data = compute_plot_data(c, ci, pr, pi, M, Mi, tauv, vth)
lw=3

plt.imshow(intersection_data, extent=[k_values.min(), k_values.max(), ki_values.min(), ki_values.max()],
           cmap='binary', origin='lower', alpha=0.6, aspect='auto')

plt.contour(k_values, ki_values, k_values*ki_values*(
    np.sqrt(ci*Mi*pi)+np.sqrt(c*M*pr))**2/(ki_values*pr-k_values*pi) - vth/tauv, 
                                  levels=[0], colors='tab:red', linewidths=lw, linestyles='-')

# =============================================================================
# plt.contour(k_values, ki_values, ci*ki_values*Mi-(c*k_values*M-vth/tauv), 
#                                   levels=[0], colors='tab:blue', linewidths=lw)
# =============================================================================

plt.contour(k_values, ki_values, c*k_values**2*M*pi-ci*ki_values**2*Mi*pr, 
                                  levels=[0], colors='blue', linewidths=lw)

# =============================================================================
# plt.contour(ki_values, k_values, ci*ki_values*Mi-c*k_values*M+vth/tauv, 
#                                   levels=[0], colors='green', linewidths=lw)
# 
# plt.contour(ki_values, k_values, ki_values*pr-k_values*pi, 
#                                   levels=[0], colors='blue', linewidths=lw)
# =============================================================================

fontsize = 20
fn = 'Arial'

# plt.text(42.5, 15, 'band-pass region', fontsize=fontsize, color='white', 
#          fontname=fn, rotation=0)

# plt.text(15, 37, r'$cMk-\frac{v_{{th}}}{\tau_v}=c_iM_ik_i$', 
#          fontsize=fontsize, color='blue', rotation=0, fontname=fn)
# plt.text(20, 5, r'$(k p_i - p_r k_i)(kk_iA-(k p_i - k_i p_r))=0$', 
#          fontsize=fontsize, color='red', rotation=0, fontname=fn)

plt.tick_params(axis='both', labelsize=fontsize)
plt.xlabel("excitatory refilling rate", fontsize=fontsize)
plt.ylabel("inhibitory refilling rate", fontsize=fontsize)

plt.show()
