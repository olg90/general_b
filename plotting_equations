import numpy as np
import matplotlib.pyplot as plt

def condition_1(c, Me, pr, ci, Mi, pi):
    return c * Me * pr > ci * Mi * pi

def condition_2(c, Me, pr, ci, Mi, pi, tauv, vth):
    A = (np.sqrt(c*Me*pr)-np.sqrt(ci*Mi*pi))**2*tauv/vth
    return (k * pr - k * pi) * (ki * k * A - (ki * pr - k * pi)) > 0

def condition_3(c, Me, k, ci, Mi, ki):
    return c * Me * k - ci * Mi * ki <= vth / tauv

def compute_plot_data():
    Me_values, Mi_values = np.meshgrid(np.linspace(0, 80, 1000), np.linspace(0, 100, 1000))

    plot_data_1 = condition_1(c, Me_values, pr, ci, Mi_values, pi)
    plot_data_2 = condition_2(c, Me_values, pr, ci, Mi_values, pi, tauv, vth)
    plot_data_3 = condition_3(c, Me_values, k, ci, Mi_values, ki)

    # Find the intersection of the three conditions
    intersection_data = plot_data_1 & plot_data_2 & plot_data_3

    return Me_values, Mi_values, intersection_data


c = 0.013
ci = 0.02
pr = 0.3
pi = 0.01
k = 10
ki = 8
tauv = 2
vth = 2

# =============================================================================
# c = 0.4 # weird one
# ci = 0.3
# pr = 0.3
# pi = 0.2
# k = 1
# ki = 1.2
# tauv = 1
# vth = 5
# =============================================================================

# Plot the contours of f(x, y) = c1 and g(x, y) = c2 on the same figure
fig, ax = plt.subplots(figsize=(8, 8))

Me_values, Mi_values, intersection_data = compute_plot_data()
lw=15

# Plot the region where all three inequalities are satisfied (intersection)
ax.imshow(intersection_data.T, extent=[Mi_values.min(), Mi_values.max(), Me_values.min(), Me_values.max()],
           cmap='binary', origin='lower', alpha=1)
upprr_limit_contour = plt.contour(Mi_values, Me_values, -c * Me_values * pr + ci * Mi_values * pi, 
                                  levels=[0], colors='green', linewidths=lw)

upprr_limit_contour = plt.contour(Mi_values, Me_values,  ci * Mi_values * ki - c * Me_values * k + vth / tauv, 
                                  levels=[0], colors='blue', linewidths=lw)


A = (np.sqrt(c*Me_values*pr)-np.sqrt(ci*Mi_values*pi))**2*tauv/vth

upprr_limit_contour = plt.contour(Mi_values, Me_values, (k * pr - k * pi) * ((ki * k )* A - (ki * pr - k * pi)), 
                                  levels=[0], colors='red', linewidths=lw)

fontsize = 20
fn = 'Arial'
plt.text(42.5, 35, 'band-pass\n   region', fontsize=fontsize+30, color='white', 
         fontname=fn, rotation=0)

plt.text(45, 5, r'$cMp_r=c_iM_ip_i$', fontsize=fontsize, color='green', rotation=5, fontname=fn)
plt.text(15, 37, r'$cMk-\frac{v_{{th}}}{\tau_v}=c_iM_ik_i$', 
         fontsize=fontsize, color='blue', rotation=52, fontname=fn)
plt.text(20, 8, r'$(k p_i - p_r k_i)(kk_iA-(k p_i - k_i p_r))=0$', 
         fontsize=fontsize, color='red', rotation=8, fontname=fn)


plt.tick_params(axis='both', labelsize=fontsize)
ax.set_xlabel("# inhibitory docking sites", fontsize=fontsize)
ax.set_ylabel("# excitatory docking sites", fontsize=fontsize)
plt.show()
