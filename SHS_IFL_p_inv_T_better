import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import bayes_mvs as bayesest

def get_time_to(text, args, n1, n2):
    
    if text == 'f':
        return np.random.exponential(1./args['f'])
    
    if text == 'pf':
        return np.random.exponential(1./args['f']/args['pe'])
    
    if text == 'n1':
        M1 = args['M1']
        k1 = args['k1']
        
        if M1 > n1:
            return np.random.exponential(1./(k1*(M1-n1)))
        else:
            return np.inf
        
    if text == 'n2':
        M2 = args['M2']
        k2 = args['k2']
        if M2 > n2:
            return np.random.exponential(1./(k2*(M2-n2)))
        else:
            return np.inf
        
def get_arg_type(i):
    
    if i == 0:
        return 'f'
    if i == 1:
        return 'pf'
    if i == 2:
        return 'n1'
    if i == 3:
        return 'n2'
    else:
        return 'measure'

def to_dict(**x):
    return x

def run_test(args):

    run_time = args['run_time']
    
    M1 = args['M1']
    M2 = args['M2']
    
    c1 = args['c1']
    c2 = args['c2']
    
    p1 = args['p1']
    p2 = args['p2']
    
    tauv = args['tauv']
    vth = args['vth']

    delta_t = args['delta_t']
        
    current_time = 0
    v_membrane = 0

    n1 = 0
    n2 = 0

    v_history = [[0, current_time]] # data array
    AP_times = []

    preneuron_firing_history = []
    
    t_measure = delta_t
    
    while current_time < run_time:
        
        time_to_f = get_time_to('f', args, n1, n2) # next reaction time
        time_to_pf = get_time_to('pf', args, n1, n2)
        time_to_n1 = get_time_to('n1', args, n1, n2)
        time_to_n2 = get_time_to('n2', args, n1, n2)
            
        times_array = np.array([time_to_f, time_to_pf, time_to_n1, time_to_n2, t_measure])
    
        t_min_arg = np.argmin(times_array)
        arg_type = get_arg_type(t_min_arg)
        t_min = times_array[t_min_arg]

        if arg_type == 'f':

            preneuron_firing_history.append(current_time)

            b1 = np.random.binomial(n1, p1) # Number released

            voltage_addition = c1*b1

            if (b1 > 0) and (n1 >= b1):
                n1 -= b1

            v_membrane += voltage_addition
            v_history.append([v_membrane, current_time])
            
            if v_membrane >= vth:
                v_membrane = 0
                AP_times.append(current_time)

            current_time += t_min
            t_measure -= t_min
            
        elif arg_type == 'pf':

            preneuron_firing_history.append(current_time)

            b2 = np.random.binomial(n2, p2) # Number released

            voltage_addition = - c2*b2

            if (b2 > 0) and (n2 >= b2):
                n2 -= b2

            v_membrane += voltage_addition
            v_history.append([v_membrane, current_time])

            current_time += t_min
            t_measure -= t_min

        elif arg_type == 'n1':
            
            if n1 < M1:
                n1 += 1
            
            current_time += t_min
            t_measure -= t_min
            
        elif arg_type == 'n2':
            
            if n2 < M2:
                n2 += 1            
            
            current_time += t_min
            t_measure -= t_min
            
        else:
            v_membrane = v_membrane*np.exp(-t_min/tauv)
            
            v_history.append([v_membrane, current_time])
    
            current_time += t_min
            t_measure = delta_t
            
    v_history = np.array(v_history) # data array
    AP_times = np.array(AP_times)
    
    inter_AP_times = np.diff(AP_times)
    if len(inter_AP_times) < 2:
        mean_inter_AP_time = np.nan
        CVT2 = np.nan
    else:
        mean_inter_AP_time = np.mean(inter_AP_times)
        CVT2 = np.var(inter_AP_times) / mean_inter_AP_time**2
    
    return {'v_history': np.array(v_history),
            'AP_times':np.array(AP_times),
            'inter_AP_times':np.array(inter_AP_times),
            'mean_T':mean_inter_AP_time, 
            'CVT2':CVT2}

def get_pe(f, c1, k1, M1, p1, vth, tauv):
# =============================================================================
#     return tauv * np.log(1/(1-(((k1 + f * p1)*vth)/(c1 * f*k1*M1*p1*tauv)))) 
# =============================================================================
    return 1

def get_T_mean(f, c1, c2, k1, k2, M1, M2, p1, p2, tauv, vth):
    pe = get_pe(f, c1, k1, M1, p1, vth, tauv)
    b1ss = p1*k1*M1/(k1 + f*p1 + f*p1*pe)
    b2ss = p2*(k2*M2)/(k2 + f*p2*pe)
    vat = (1 + pe)*c1*f*b1ss - c2*f*b2ss*pe
    return tauv * np.log(1 / (1 - vth / (vat * tauv)))

# =============================================================================
# def get_CVT2(f, c1, c2, M1, M2, k1, k2, p1, p2, cp, Hp, pmin, tauv, vth):
#     
#     bMeanSS = (c1 * k1 * M1 * p1) / (k1 + f * p1) - (
#         c2 * k2 * M2 * p2 * ((cp * f)**Hp + pmin)) / ((1 + (cp * f)**Hp) * (k2 + f * p2))
# 
#     bSquaredMeanSS = -((c1**2 * k1 * M1 * (-1 + p1) * p1) / (k1 + f * p1)) - \
#          ((c2**2 * k2 * M2 * (-1 + p2) * p2 * ((cp * f)**Hp + pmin)) / (k2 + f * p2)) + \
#          ((c1 * k1 * M1 * p1) / (k1 + f * p1) - (c2 * k2 * M2 * p2 * ((cp * f)**Hp + pmin)) / (k2 + f * p2))**2
# 
#     CVT2 = -((vth * (vth - 2 * f * tauv * bMeanSS) * bSquaredMeanSS) / (
#         2 * f * tauv * bMeanSS**2 * (vth - f * tauv * bMeanSS)**2 * np.log(1 + vth / (-vth + f * tauv * bMeanSS))**2))
#     return CVT2
# =============================================================================

def get_CVT2(f, c1, p1, k1, M1, c2, p2, k2, M2, vth, tauv):
    # Intermediate calculations
    pi = get_pe(f, c1, k1, M1, p1, vth, tauv)
    
    b1MeanSS = p1 * k1 * M1 / (f * p1 + k1)
    b2MeanSS = p2 * k2 * M2 / (f * p2 + k2)
    
    bMeanSS = c1 * p1 * k1 * M1 / (f * p1 + k1) - c2 * p2 * k2 * M2 / (f * p2 + k2) * pi
    
    bVarianceSS = c1**2 * (1 - p1) * b1MeanSS + c2**2 * pi * (1 - p2) * b2MeanSS
    
    bSquaredMeanSS = bVarianceSS + bMeanSS**2
    
    # Main expression
    numerator = vth * (-2 * f * tauv * vth * bMeanSS**2 + (-1 + 2 * f * tauv) * vth * bSquaredMeanSS + 2 * f * tauv * bMeanSS * bSquaredMeanSS)
    denominator = 2 * f * tauv * bMeanSS**2 * (vth - f * tauv * bMeanSS)**2 * np.log(1 + vth / (-vth + f * tauv * bMeanSS))**2
    result = numerator / denominator
    
    return result

def get_equations(f, params):
    
    M1 = params['M1']
    M2 = params['M2']

    p1 = params['p1']
    p2 = params['p2']
    
    c1 = params['c1']
    c2 = params['c2']

    k1 = params['k1']
    k2 = params['k2']

    tauv = params['tauv']
    vth = params['vth']

    T_mean = get_T_mean(f, c1, c2, k1, k2, M1, M2, p1, p2, tauv, vth)

# =============================================================================
#     CVT2 = get_CVT2(f, c1, p1, k1, M1, c2, p2, k2, M2, cp, Hp, pmin, vth, tauv)
# =============================================================================
    
    CVT2 = 1

    return T_mean, CVT2



###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

# Values of c to test
f_max = 200

f_vals = np.linspace(0, f_max, 100)

run_time = 15

p1 = 0.2 # 0.1
p2 = 0.005 # 0.005

M1 = 100 # 50
M2 = 100 # 50

c1 = 0.01 #0.01
c2 = 0.01 # 0.01

k1 = 1 # 1 
k2 = 10 # 10

tauv = 1
vth = 0.2

print(c1*k1*M1, c2*k2*M2)

delta_t = 0.01

#

mTs = []
mTe = []
cs = []
ce = []

n_times = 50
for ntime in range(n_times):

    # Simulations
    mean_T_sim = []
    CVT2_sim = []
    
    # Simulations
    for j, f_val in enumerate(f_vals):
        pe = get_pe(f_val, c1, k1, M1, p1, vth, tauv)
        params = to_dict(run_time = run_time, f = f_val, M1 = M1, M2 = M2,
                         p1 = p1, p2 = p2, c1 = c1, c2 = c2, k1 = k1, pe = pe, 
                         k2 = k2, tauv = tauv, vth = vth, delta_t = delta_t)  
        print(j/len(f_vals))
    
        result = run_test(params)
    
        mean_T_sim.append(result['mean_T'])
        CVT2_sim.append(result['CVT2'])

    # Equations
    mean_T_eq = []
    CVT2_eq = []
    
    for f_val in f_vals:
        pe = get_pe(f_val, c1, k1, M1, p1, vth, tauv)
        params = to_dict(run_time = run_time, f = f_val, M1 = M1, M2 = M2,
                         p1 = p1, p2 = p2, c1 = c1, c2 = c2, k1 = k1, pe = pe, 
                         k2 = k2, tauv = tauv, vth = vth, delta_t = delta_t)  
        T_mean_eq_val, CVT2_eq_val = get_equations(f_val, params)
        mean_T_eq.append(T_mean_eq_val)
        CVT2_eq.append(CVT2_eq_val)

    mTs.append(mean_T_sim)
    cs.append(CVT2_sim)
    mTe.append(mean_T_eq)
    ce.append(CVT2_eq)
    
mean_T_sim = np.array(mTs)
CVT2_sim = np.array(cs)
mean_T_eq = np.array(mTe)
CVT2_eq = np.array(ce)


mean_T_sim = np.array(mean_T_sim)
mean_T_eq = np.array(mean_T_eq)
CVT2_sim = np.array(CVT2_sim)
CVT2_eq = np.array(CVT2_eq)

deltT = []
errdeltT = []

deltC = []
errdeltC = []

f_vec = []
for i,x in enumerate(mean_T_sim.T):
    mean_cntr, var_cntr, std_cntr = bayesest(x,alpha=0.95)
    deltT.append(mean_cntr[0])
    errdeltT.append(mean_cntr[1][1]-mean_cntr[0])
    f_vec.append(f_vals[i])

for i,x in enumerate(CVT2_sim.T):
    mean_cntr, var_cntr, std_cntr = bayesest(x,alpha=0.95)
    deltC.append(mean_cntr[0])
    errdeltC.append(mean_cntr[1][1]-mean_cntr[0])

mean_T_sim = np.mean(mean_T_sim, axis = 0)
mean_T_eq = np.mean(mean_T_eq, axis = 0)
CVT2_sim = np.mean(CVT2_sim, axis = 0)
CVT2_eq = np.mean(CVT2_eq, axis = 0)

f_actual = f_vals

F_sim = 1/np.array(mean_T_sim)
F_eq = 1/np.array(mean_T_eq)


# =============================================================================
# fontsize = 20
# fig, ax = plt.subplots(1,2)
# ax[0].plot(f_actual, F_sim)
# ax[0].plot(f_actual, F_eq)
# ax[0].set_xlabel('\t\t\t\t\t\texcitatory firing frequency, $f_e$ $(Hz)$', fontsize = fontsize)
# ax[0].set_ylabel(r'mean output frequency, $\langle F \rangle$ $(Hz)$', fontsize = fontsize)
# ax[0].tick_params(axis = 'both', labelsize = fontsize)
# ax[0].errorbar(f_vec,1/np.array(deltT),yerr=errdeltT, fmt='o',mec='k',capsize=4,markersize='2',elinewidth=1,c='#0075BD', alpha = 0.5)
# 
# =============================================================================
# =============================================================================
# ax[1].plot(f_actual, CVT2_sim, label = 'simulations')
# ax[1].plot(f_actual, CVT2_eq, label = 'equation')
# ax[1].legend(loc = 'upper left', fontsize = fontsize-5)
# ax[1].set_ylabel(r'noise, $CV^2_T$', fontsize = fontsize)
# ax[1].tick_params(axis = 'both', labelsize = fontsize)
# ax[1].errorbar(f_vec,deltC,yerr=errdeltC, fmt='o',mec='k',capsize=4,markersize='2',elinewidth=2,c='#0075BD')
#     
# =============================================================================
#%%
fontsize = 20

plt.plot(f_actual, F_sim, label = 'simulations')
plt.plot(f_actual, F_eq, label = 'theoretical')
plt.xlabel('excitatory firing frequency, $f_e$ $(Hz)$', fontsize = fontsize)
plt.ylabel(r'mean output frequency, $\langle F \rangle$ $(Hz)$', fontsize = fontsize)
plt.tick_params(axis = 'both', labelsize = fontsize)
plt.errorbar(f_vec,1/np.array(deltT),yerr=errdeltT, fmt='o',mec='k',capsize=4,markersize='2',elinewidth=1,c='#0075BD', alpha = 0.5)
plt.plot([], [], ' ', label = r'$p(f) = 1$')
plt.legend(loc='upper right', fontsize = fontsize - 5)
plt.grid(True, alpha = 0.6)


plt.subplots_adjust(
top=0.95,
bottom=0.15,
left=0.075,
right=0.96,
hspace=0.2,
wspace=0.24)

plt.show()
