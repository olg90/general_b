import numpy as np
import matplotlib.pyplot as plt

from numpy import inf, argmin, array, exp, var, nan, mean, diff, log, linspace, isnan, zeros, arange
from numpy.random import exponential, binomial

def get_v(t, tauv, gammax, v0, kv, x0):
    result = np.exp(-t/tauv)*((-1+gammax*tauv)*v0 - (-1+np.exp(t*(-gammax+1/tauv))*kv*tauv*x0))/(-1+gammax*tauv)
    return result

def run_test(f, run_time, kv, cx, gammax, M, k, pr, tau, vth, delta_t):

    current_time = 0

    v = 0
    n = 0
    x = 0

    vhist=[]
    nhist=[]
    xhist=[]
    thist=[]

    AP_times = []
    fire_times=[]
    
    t_measure = delta_t
    while current_time < run_time:
        t0=exponential(1./f)
        t1=exponential(1./(k*(M-n)+1e-10))
        t2=exponential(1./(gammax*x+1e-10))
        if t0<t1 and t0<t2:
            fire_times.append(current_time)
            t_min=t0
            b = binomial(n, pr) # Number released
            n-=b

            x=exp(-gammax*t_min)*x # decay
            x+=cx*b # Add new
            
            v=get_v(t_min, tauv, gammax, v, kv, x)

            if v>vth:
                
                AP_times.append(current_time)
                v = 0
                
            
                
            vhist.append(v)
            nhist.append(n)
            xhist.append(x)
            thist.append(current_time)
            
        else:
            t_min=t1

            x=exp(-gammax*t_min)*x # decay
            v=get_v(t_min, tauv, gammax, v, kv, x)

            if n < M:
                n+=1 
                
            if v>vth:
                AP_times.append(current_time)
                v = 0
            
            vhist.append(v)
            nhist.append(n)
            xhist.append(x)
            thist.append(current_time)
            

            
        current_time += t_min
        t_measure -= t_min   
        if t_measure == 0:
            t_measure = delta_t
            
        
    return fire_times, AP_times, thist, vhist, nhist, xhist

###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

# Values of c to test
fmin = 1
fmax = 500
n_samples = 500
f_val_list = np.linspace(fmin,fmax, n_samples)

run_time = 10

xname = 'k'
M = 100
pr = 0.2
tauv = 1
vth = 0.2
k=10


gammax=100 # decay rate
kv=0.01 # voltage introduction rate
cx=10 # num nt per vesicle

f=50

delta_t = 0.01


ft, apt, th, vh, nh, xh = run_test(f, run_time, kv, cx, gammax, M, k, pr, tauv, vth, delta_t)
fig, ax = plt.subplots(1,3)
ax[0].plot(th, vh)
ax[1].plot(th, nh)
ax[2].plot(th, xh)
ax[0].set_title('v')
ax[1].set_title('n')
ax[2].set_title('x')
