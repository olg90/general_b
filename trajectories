from scipy.stats import bayes_mvs as bayesest
from numpy import inf, argmin, array, exp, var, nan, mean, diff, log, linspace, isnan, zeros, arange
from numpy.random import exponential, binomial
import matplotlib.pyplot as plt

def getnextv(t,tauv,gammax,kv,z,v):
    numerator=(exp(-t*(gammax+1/tauv))*(-exp(t/tauv)*kv*tauv*z+exp(gammax*t)*((-1+gammax*tauv)*v+kv*tauv*z)))
    denominator=(-1+gammax*tauv)
    return numerator/denominator

def getnextz(t,gammax,z):
    return exp(-gammax*t)*z

def run_test(f, run_time, M, k, pr, gammax, kv, cx, tau, vth, delta_t):
    
    vhist=[]
    zhist=[]
    thist=[]
    nhist=[]
    current_time = 0
    v = 0
    n = 0
    z = 0
    AP_times = []
    t_measure=delta_t
    while current_time < run_time:
        t0=exponential(1./f)
        t1=exponential(1./(k*(M-n)+1e-10))
        if t0<t1 and t0<t_measure:
            t_min=t0
            b = binomial(n, pr) # Number released
            n-=b
            z+=cx*b
            v = getnextv(t_min, tauv, gammax, kv, z, v)
            z = getnextz(t_min, gammax, z)

            if v>vth:
                AP_times.append(current_time)
                v = 0
                
            vhist.append(v)
            zhist.append(z)
            thist.append(current_time)
            nhist.append(n)
                
            t_measure-=t_min
        elif t1 < t0 and t1 < t_measure:
            t_min=t1
            if n < M:
                n+=1
            v = getnextv(t_min, tauv, gammax, kv, z, v)
            z = getnextz(t_min, gammax, z)

            if v>vth:
                AP_times.append(current_time)
                v = 0
                
            vhist.append(v)
            zhist.append(z)
            thist.append(current_time)
            nhist.append(n)
            
            t_measure -= t_min
        else:
            v = getnextv(t_measure, tauv, gammax, kv, z, v)
            z = getnextz(t_measure, gammax, z)

            if v>vth:
                AP_times.append(current_time)
                v = 0

            t_measure=delta_t
            
            vhist.append(v)
            zhist.append(z)
            thist.append(current_time)
            nhist.append(n)
    
        current_time += t_min

    return vhist, zhist, thist, nhist
            
###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

# Values of c to test
fmin = 1
fmax = 100
n_samples = 100
f_val_list = linspace(fmin, fmax, n_samples)

run_time = 1

M = 100
k = 10
pr = 0.1
gammax = 2
kv = 0.01
cx = 10
tauv = 1
vth = 0.2
f=10

delta_t = 0.01

vh,zh,th,nh =run_test(f, run_time, M, k, pr, gammax, kv, cx, tauv, vth, delta_t)
fig, ax = plt.subplots(1,3, figsize=(10,3))
ax[0].plot(th,vh, label='v')
ax[0].legend()
ax[1].plot(th,zh, label='z')
ax[1].legend()
ax[2].plot(th,nh, label='n')
ax[2].legend()
plt.show()
