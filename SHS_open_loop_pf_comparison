import numpy as np
import matplotlib.pyplot as plt
from numpy import inf, argmin, array, exp, var, nan, mean, diff, log, linspace, isnan
from numpy.random import exponential, binomial

def run_test(f, run_time, c, M, k, pr, tau3, vth3, delta_t):
    current_time = 0
    v3 = 0
    n1 = 0
    AP_times3 = []
    t_measure = delta_t
    while current_time < run_time:
        t0=exponential(1./f)
        t1=exponential(1./(k*(M-n1)+1e-10))
        if t0<t1 and t0<t1:
            t_min=t0
            b1 = binomial(n1, pr) # Number released
            n1-=b1
            v3*=exp(-t_min/tau3)
            v3+=c*b1
            if v3>vth3:
                AP_times3.append(current_time)
                v3 = 0
        else:
            t_min=t1
            v3*=exp(-t_min/tau3)
            if n1 < M:
                n1+=1
        current_time += t_min
        t_measure -= t_min
        if t_measure == 0:
            t_measure = delta_t
    if len(AP_times3) < 2:
        Tmean = nan
        CVT2 = nan
    else:
        Tmean = mean(diff(AP_times3)[int(0.4*(len(AP_times3))-1):])
        CVT2 = var(diff(AP_times3)[int(0.4*(len(AP_times3))-1):]) / (mean(diff(AP_times3)[int(0.4*(len(AP_times3))-1):]))**2
    return Tmean, CVT2

def get_T_mean(f, tauv, vth, c, pr, k, M):
    # General equation attempt with p and q

    nMeanSS = k * M / (f * pr + k)
    bMeanSS = pr * nMeanSS
    vatSS = c * bMeanSS
            
    return tauv * np.log(1 / (1 - vth / (f * tauv * vatSS)))

def get_CVT2(f, k, M, pr, tauv, vth, c):
    numerator = -((k + f * pr)**2 * (
        (2 * f * k**2 * M**2 * pr**2 * tauv * vth**2) / 
        (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2 + 
        1 / (k + f * pr - (k + f * pr)**3 * tauv**2) * 
        (1 / (2 * k - f * (-2 + pr) * pr) * k * M * pr * 
         (-f * (-2 + pr) * pr + 2 * k * (1 + (-1 + M) * pr)) * 
         ((1 - k * tauv + f * pr * tauv) * (1 + k * tauv + f * pr * tauv) - 
          4 * f * pr * tauv * ((c * f * k * M * pr * tauv) / 
                               (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
          (c**2 * f**2 * k**2 * M**2 * pr**2 * tauv**2 * 
           (1 + k * tauv - f * pr * tauv) * 
           (-1 + k * tauv + f * pr * tauv)) / 
          (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2) + 
         2 * f * k * M * pr**2 * tauv * 
         (((2 * k * M - f * (-2 + pr) * pr) * 
           (-1 - (k + f * pr) * tauv + 
            2 * ((c * f * k * M * pr * tauv) / 
                 (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
            (c**2 * f**2 * k**2 * M**2 * pr**2 * tauv**2 * 
             (-1 + k * tauv + f * pr * tauv)) / 
            (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2)) / 
         (2 * k - f * (-2 + pr) * pr) + 
         1 / (k + f * pr) * 
         k * M * ((k + f * pr) * tauv * 
                  (1 + k * tauv + f * pr * tauv) - 
                  2 * ((c * f * k * M * pr * tauv) / 
                       (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
                  (c**2 * f**2 * k**2 * M**2 * pr**2 * 
                   (k + f * pr) * tauv**3 * 
                   (-1 + k * tauv + f * pr * tauv)) / 
                  (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2 + 
                  (2 * c * f * k * M * pr * tauv * 
                   (1 - (k + f * pr)**2 * tauv**2)) / 
                  (c * f * k * M * pr * tauv - (k + f * pr) * vth))))))

    denominator = 2 * f * k**2 * M**2 * pr**2 * tauv * np.log(
        (c * f * k * M * pr * tauv) / (c * f * k * M * pr * tauv - (k + f * pr) * vth))**2

    result = numerator / denominator

    return result


def get_equations(f, c, pr, k, M, tauv, vth):    
    T_mean = get_T_mean(f, tauv, vth, c, pr, k, M)
    CVT2 = get_CVT2(f, k, M, pr, tauv, vth, c)
    return T_mean, CVT2

###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

# Values of c to test
f_max = 500
n_samples = 100
f_val_list = np.linspace(0,f_max, n_samples)

run_time = 15

M = 100
pr = 0.2
c = 0.001
k = 100
tauv = 1
vth = 0.2

delta_t = 0.01

# Simulations
mean_T_sim = []
mean_T_eq = []
CVT2_sim = []
CVT2_eq = []
pf_sim = []
pf_eq = []

for i, f_val in enumerate(f_val_list):
    print(i/len(f_val_list))
    Tmean, CVT2 = run_test(f_val, run_time, c, M, k, pr, tauv, vth, delta_t)
    mean_T_sim.append(Tmean)
    CVT2_sim.append(CVT2)
    pf_sim.append(1/(f_val*Tmean))

for f_val in f_val_list:
    T_mean_eq_val, CVT2T_eq_val = get_equations(f_val, c, pr, k, M, tauv, vth)
    mean_T_eq.append(T_mean_eq_val)
    CVT2_eq.append(CVT2T_eq_val)
    pf_eq.append(1/(f_val*T_mean_eq_val))

#%%
# Set font size for better readability
fontsize = 15

# Plotting the data
plt.plot(f_val_list, pf_sim, label='simulated p(f)', linewidth=2, markersize=8)
plt.plot(f_val_list, pf_eq, label='theoretical p(f)', linewidth=3)

# Adding labels and title
plt.xlabel('presynaptic neuron input frequency, $f$ (Hz)', fontsize=fontsize)
plt.ylabel('probability of postsynaptic\n neuron firing, $p(f)$', fontsize=fontsize)

plt.tick_params(axis='both', labelsize=fontsize)
plt.legend(fontsize=fontsize)
plt.grid(True, linestyle='--', alpha=0.7)
