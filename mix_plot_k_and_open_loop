import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import bayes_mvs as bayesest

def get_time_to(text, f, ku, Mu, nu):
    
    if text == 'f':
        return np.random.exponential(1./f)
    
    if text == 'nu':
        if Mu > nu:
            return np.random.exponential(1./(ku*(Mu-nu)))
        else:
            return np.inf
    

def get_arg_type(i):
    
    if i == 0:
        return 'f'
    if i == 1:
        return 'nu'
    if i == 2:
        return 'measure'

def to_dict(**x):
    return x

def run_test(args):
    
    # Set up all parameters

    run_time = args['run_time']
    f = args['f']

    ku = args['ku']
    Mu = args['Mu']
    pu = args['pu']
    cu = args['cu']
    
    tauv = args['tauv']
    vth = args['vth']

    delta_t = args['delta_t']
    
    current_time = 0
    v_membrane = 0
    
    nu = 0

    v_history = [[0, current_time]] # data array
    AP_times = []

    preneuron_firing_history = []
    
    t_measure = delta_t
    
    # Run the main test
    
    while current_time < run_time:
        
        # Get the next event time
        time_to_f = get_time_to('f', f, ku, Mu, nu)
        time_to_nu = get_time_to('nu', f, ku, Mu, nu)
            
        times_array = np.array([time_to_f, time_to_nu, t_measure])
    
        # Find the minimum of the times and choose that time
        t_min_arg = np.argmin(times_array)
        arg_type = get_arg_type(t_min_arg)
        t_min = times_array[t_min_arg]
    
        # If the event is a firing
        if arg_type == 'f':
            preneuron_firing_history.append(current_time)

            b_u = np.random.binomial(nu, pu) # Number released
            nu -= b_u

            voltage_addition = cu*b_u
            v_membrane += voltage_addition
            
            v_history.append([v_membrane, current_time])
            
            if v_membrane >= vth:
                
                v_membrane = 0
                AP_times.append(current_time)

            current_time += t_min
            t_measure -= t_min
            
        # If we're refilling 
        elif arg_type == 'nu':
            
            if nu < Mu:
                nu += 1            
            
            current_time += t_min
            t_measure -= t_min
            
        else:
            v_membrane = v_membrane*np.exp(-t_min/tauv)
            
            v_history.append([v_membrane, current_time])
    
            current_time += t_min
            t_measure = delta_t
            
    v_history = np.array(v_history) # data array
    AP_times = np.array(AP_times)
    
    inter_AP_times = np.diff(AP_times)
    if len(inter_AP_times) < 2:
        mean_inter_AP_time = np.nan
        CVT2 = np.nan
    else:
        mean_inter_AP_time = np.mean(inter_AP_times)
        CVT2 = np.var(inter_AP_times) / mean_inter_AP_time**2
    
    return {'v_history': np.array(v_history),
            'AP_times':np.array(AP_times),
            'inter_AP_times':np.array(inter_AP_times),
            'mean_T':mean_inter_AP_time, 
            'CVT2':CVT2}

# =============================================================================
# def get_T_mean(k, f, pr, c, M, tauv, vth):
#     return tauv * np.log(1 / (1 - ((k + f * pr) * vth) / (c * f * k * M * pr * tauv)))
#
# def get_CVT2(k, f, pr, c, M, tauv, vth):
#     numerator = -((k + f * pr) * (-1 + k * (-1 + pr) + f * (-1 + pr) * pr) * vth * (2 * c * f * k * M * pr * tauv - (k + f * pr) * vth))
#     denominator = 2 * f * k * M * pr * tauv * (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2 * np.log((c * f * k * M * pr * tauv) / (c * f * k * M * pr * tauv - (k + f * pr) * vth))**2
# 
#     result = numerator / denominator
#     return result    
# =============================================================================


# =============================================================================
# # original
# def get_T_mean(k, f, pr, c, M, tauv, vth):
#     b_mean = c * pr * k * M / (f * pr + k)
#     return tauv * np.log(1 / (1 - vth / (f * tauv * b_mean)))
# 
# def get_CVT2(k, f, pr, c, M, tauv, vth):
#     b_mean = c * pr * k * M / (f * pr + k)
#     b_squared_mean = c**2 * (pr * (1 - pr) * k * M / (f * pr + k) + (pr * k * M / (f * pr + k)**2))
# 
#     numerator = -vth * (vth - 2 * f * tauv * b_mean) * b_squared_mean
#     denominator = 2 * f * tauv * b_mean**2 * (vth - f * tauv * b_mean)**2 * np.log(1 + vth / (-vth + f * tauv * b_mean))**2
# 
#     return numerator / denominator   
# =============================================================================


def get_T_mean(f, tauv, vth, c, pr, k, M):
    # General equation attempt with p and q

    nMeanSS = k * M / (f * pr + k)
    bMeanSS = pr * nMeanSS
    vatSS = c * bMeanSS
            
    return tauv * np.log(1 / (1 - vth / (f * tauv * vatSS)))

def get_CVT2(f, k, M, pr, tauv, vth, c):
    numerator = -((k + f * pr)**2 * (
        (2 * f * k**2 * M**2 * pr**2 * tauv * vth**2) / 
        (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2 + 
        1 / (k + f * pr - (k + f * pr)**3 * tauv**2) * 
        (1 / (2 * k - f * (-2 + pr) * pr) * k * M * pr * 
         (-f * (-2 + pr) * pr + 2 * k * (1 + (-1 + M) * pr)) * 
         ((1 - k * tauv + f * pr * tauv) * (1 + k * tauv + f * pr * tauv) - 
          4 * f * pr * tauv * ((c * f * k * M * pr * tauv) / 
                               (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
          (c**2 * f**2 * k**2 * M**2 * pr**2 * tauv**2 * 
           (1 + k * tauv - f * pr * tauv) * 
           (-1 + k * tauv + f * pr * tauv)) / 
          (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2) + 
         2 * f * k * M * pr**2 * tauv * 
         (((2 * k * M - f * (-2 + pr) * pr) * 
           (-1 - (k + f * pr) * tauv + 
            2 * ((c * f * k * M * pr * tauv) / 
                 (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
            (c**2 * f**2 * k**2 * M**2 * pr**2 * tauv**2 * 
             (-1 + k * tauv + f * pr * tauv)) / 
            (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2)) / 
         (2 * k - f * (-2 + pr) * pr) + 
         1 / (k + f * pr) * 
         k * M * ((k + f * pr) * tauv * 
                  (1 + k * tauv + f * pr * tauv) - 
                  2 * ((c * f * k * M * pr * tauv) / 
                       (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
                  (c**2 * f**2 * k**2 * M**2 * pr**2 * 
                   (k + f * pr) * tauv**3 * 
                   (-1 + k * tauv + f * pr * tauv)) / 
                  (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2 + 
                  (2 * c * f * k * M * pr * tauv * 
                   (1 - (k + f * pr)**2 * tauv**2)) / 
                  (c * f * k * M * pr * tauv - (k + f * pr) * vth))))))

    denominator = 2 * f * k**2 * M**2 * pr**2 * tauv * np.log(
        (c * f * k * M * pr * tauv) / (c * f * k * M * pr * tauv - (k + f * pr) * vth))**2

    result = numerator / denominator

    return result


def get_T_mean_toy(k, f, M, pr, tauv, vth, c):
    expression = tauv * np.log(1 / (1 - ((k + f * pr) * vth) / (c * f * k * M * pr * tauv)))
    return expression

    
def get_CVT2_toy(k, f, M, pr, tauv, vth, c):
    numerator = -((k + f * pr)**2 * ((k * M * pr) / (k + f * pr)**2 + (k * M * (1 - pr) * pr) / (k + f * pr)) * vth * (-((2 * c * f * k * M * pr * tauv) / (k + f * pr)) + vth))
    denominator = 2 * f * k**2 * M**2 * pr**2 * tauv * (-((c * f * k * M * pr * tauv) / (k + f * pr)) + vth)**2 * np.log(1 + vth / ((c * f * k * M * pr * tauv) / (k + f * pr) - vth))**2

    result = numerator / denominator

    return result

def get_equations(f, params):
    
    M = params['Mu']
    pr = params['pu']
    c = params['cu']
    k = params['ku']
    
    tauv = params['tauv']
    vth = params['vth']
    
    T_mean = get_T_mean(f, tauv, vth, c, pr, k, M)
    CVT2 = get_CVT2(f, k, M, pr, tauv, vth, c)
    
    return T_mean, CVT2





###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

# Values of c to test
fmin = 1
f_max = 50
n_samples = 200
f_val_listO = np.linspace(fmin,f_max, n_samples)

run_time = 60*10

M = 100
pr = 0.2
c = 0.003
k = 5
tauv = 5
vth = 0.2

# =============================================================================
# xname = 'k'
# M = 100
# pr = 0.2
# c = 0.003
# tauv = 5
# vth = 0.2
# 
# x0=100
# x1=0
# Hx = 1.7
# cx = 1
# =============================================================================

delta_t = 0.01

# Simulations

# =============================================================================
# mTs = []
# mTe = []
# cs = []
# ce=[]
# 
# 
# mean_T_sim = []
# CVT2_sim = []
# 
# for i, f_val in enumerate(f_val_listO):
#     params = to_dict(run_time = run_time, f = f_val, Mu = M,
#                      pu = pr, cu = c, ku = k, 
#                      tauv = tauv, vth = vth, delta_t = delta_t)  
# # =============================================================================
# #         print(i/len(f_val_listO))
# # =============================================================================
# 
#     result = run_test(params)
# 
#     mean_T_sim.append(result['mean_T'])
#     CVT2_sim.append(result['CVT2'])
# 
# =============================================================================
# Equations
params = to_dict(run_time = run_time, f = 0, Mu = M,
                  pu = pr, cu = c, ku = k, 
                  tauv = tauv, vth = vth, delta_t = delta_t) 

mean_T_eq = []
CVT2_eq = []

for f_val in f_val_listO:
    T_mean_eq_val, CVT2T_eq_val = get_equations(f_val, params)
    mean_T_eq.append(T_mean_eq_val)
    CVT2_eq.append(CVT2T_eq_val)

# =============================================================================
# mean_T_simO = np.array(mean_T_sim)
# =============================================================================
mean_T_eqO = np.array(mean_T_eq)
# =============================================================================
# CVT2_simO = np.array(CVT2_sim)
# =============================================================================
CVT2_eqO = np.array(CVT2_eq)
Fo=1/mean_T_eqO

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import bayes_mvs as bayesest

from numpy import inf, argmin, array, exp, var, nan, mean, diff, log, linspace, isnan, zeros, arange
from numpy.random import exponential, binomial

def get_time_to(text, f, ku, Mu, nu):
    
    if text == 'f':
        return np.random.exponential(1./f)
    
    if text == 'nu':
        if Mu > nu:
            return np.random.exponential(1./(ku*(Mu-nu)))
        else:
            return np.inf
        
    
def get_hill(f, x0, x1, Hx, cx):
    return (x1*(f/cx)**Hx+x0)/(1+(f/cx)**Hx)
    

def get_arg_type(i):
    
    if i == 0:
        return 'f'
    if i == 1:
        return 'nu'
    if i == 2:
        return 'measure'

def to_dict(**x):
    return x

def run_test(f, run_time, c, M, k, pr, tau, vth, delta_t, Hx, cx, x0, x1, xname):
    
    if xname == 'k':
        k = get_hill(f, x0, x1, Hx, cx)
    if xname == 'pr':
        pr = get_hill(f, x0, x1, Hx, cx)
    if xname == 'M':
        M = get_hill(f, x0, x1, Hx, cx)
    if xname == 'c':
        c = get_hill(f, x0, x1, Hx, cx)
    
    current_time = 0
    v = 0
    n = 0

    AP_times = []
    t_measure = delta_t
    while current_time < run_time:
        t0=exponential(1./f)
        t1=exponential(1./(k*(M-n)+1e-10))
        if t0<t1:
            t_min=t0
            b = binomial(n, pr) # Number released
            n-=b
            v+=c*b
            if v>vth:
                AP_times.append(current_time)
                v = 0
        elif t1<t0:
            t_min=t1
            if n < M:
                n+=1
        else:
            v*=exp(-t_min/tau)
        current_time += t_min
        t_measure -= t_min   
        if t_measure == 0:
            t_measure = delta_t
    if len(AP_times) < 2:
        return nan, nan
    else:
        return mean(diff(AP_times)[int(0.4*(len(AP_times))-1):]), \
            var(diff(AP_times)[int(0.4*(len(AP_times))-1):]) / (mean(diff(AP_times)[int(0.4*(len(AP_times))-1):]))**2

# =============================================================================
# def run_test(args):
#     
#     # Set up all parameters
# 
#     run_time = args['run_time']
#     f = args['f']
# 
#     ku = args['ku']
#     Mu = args['Mu']
#     pu = args['pu']
#     cu = args['cu']
#     
#     x0 = args['x0']
#     x1 = args['x1']
#     Hx = args['Hx']
#     cx = args['cx']
#     xname = args['xname']
#     
#     if xname == 'k':
#         ku = get_hill(f, x0, x1, Hx, cx)
#     if xname == 'pr':
#         pu = get_hill(f, x0, x1, Hx, cx)
#     if xname == 'M':
#         Mu = get_hill(f, x0, x1, Hx, cx)
#     if xname == 'c':
#         cu = get_hill(f, x0, x1, Hx, cx)
#     
#     
#     
#     tauv = args['tauv']
#     vth = args['vth']
# 
#     delta_t = args['delta_t']
#     
#     current_time = 0
#     v_membrane = 0
#     
#     nu = 0
# 
#     v_history = [[0, current_time]] # data array
#     AP_times = []
# 
#     preneuron_firing_history = []
#     
#     t_measure = delta_t
#     
#     # Run the main test
#     
#     while current_time < run_time:
#         
#         # Get the next event time
#         time_to_f = get_time_to('f', f, ku, Mu, nu)
#         time_to_nu = get_time_to('nu', f, ku, Mu, nu)
#             
#         times_array = np.array([time_to_f, time_to_nu, t_measure])
#     
#         # Find the minimum of the times and choose that time
#         t_min_arg = np.argmin(times_array)
#         arg_type = get_arg_type(t_min_arg)
#         t_min = times_array[t_min_arg]
#     
#         # If the event is a firing
#         if arg_type == 'f':
#             preneuron_firing_history.append(current_time)
# 
#             b_u = np.random.binomial(nu, pu) # Number released
#             nu -= b_u
# 
#             voltage_addition = cu*b_u
#             v_membrane += voltage_addition
#             
#             v_history.append([v_membrane, current_time])
#             
#             if v_membrane >= vth:
#                 
#                 v_membrane = 0
#                 AP_times.append(current_time)
# 
#             current_time += t_min
#             t_measure -= t_min
#             
#         # If we're refilling 
#         elif arg_type == 'nu':
#             
#             if nu < Mu:
#                 nu += 1            
#             
#             current_time += t_min
#             t_measure -= t_min
#             
#         else:
#             v_membrane = v_membrane*np.exp(-t_min/tauv)
#             
#             v_history.append([v_membrane, current_time])
#     
#             current_time += t_min
#             t_measure = delta_t
#             
#     v_history = np.array(v_history) # data array
#     AP_times = np.array(AP_times)
#     
#     inter_AP_times = np.diff(AP_times)
#     if len(inter_AP_times) < 2:
#         mean_inter_AP_time = np.nan
#         CVT2 = np.nan
#     else:
#         mean_inter_AP_time = np.mean(inter_AP_times)
#         CVT2 = np.var(inter_AP_times) / mean_inter_AP_time**2
#     
#     return {'v_history': np.array(v_history),
#             'AP_times':np.array(AP_times),
#             'inter_AP_times':np.array(inter_AP_times),
#             'mean_T':mean_inter_AP_time, 
#             'CVT2':CVT2}
# =============================================================================

# =============================================================================
# def get_T_mean(k, f, pr, c, M, tauv, vth):
#     return tauv * np.log(1 / (1 - ((k + f * pr) * vth) / (c * f * k * M * pr * tauv)))
#
# def get_CVT2(k, f, pr, c, M, tauv, vth):
#     numerator = -((k + f * pr) * (-1 + k * (-1 + pr) + f * (-1 + pr) * pr) * vth * (2 * c * f * k * M * pr * tauv - (k + f * pr) * vth))
#     denominator = 2 * f * k * M * pr * tauv * (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2 * np.log((c * f * k * M * pr * tauv) / (c * f * k * M * pr * tauv - (k + f * pr) * vth))**2
# 
#     result = numerator / denominator
#     return result    
# =============================================================================


# =============================================================================
# # original
# def get_T_mean(k, f, pr, c, M, tauv, vth):
#     b_mean = c * pr * k * M / (f * pr + k)
#     return tauv * np.log(1 / (1 - vth / (f * tauv * b_mean)))
# 
# def get_CVT2(k, f, pr, c, M, tauv, vth):
#     b_mean = c * pr * k * M / (f * pr + k)
#     b_squared_mean = c**2 * (pr * (1 - pr) * k * M / (f * pr + k) + (pr * k * M / (f * pr + k)**2))
# 
#     numerator = -vth * (vth - 2 * f * tauv * b_mean) * b_squared_mean
#     denominator = 2 * f * tauv * b_mean**2 * (vth - f * tauv * b_mean)**2 * np.log(1 + vth / (-vth + f * tauv * b_mean))**2
# 
#     return numerator / denominator   
# =============================================================================


def get_T_mean(f, tauv, vth, c, pr, k, M):
    # General equation attempt with p and q

    nMeanSS = k * M / (f * pr + k)
    bMeanSS = pr * nMeanSS
    vatSS = c * bMeanSS
            
    return tauv * np.log(1 / (1 - vth / (f * tauv * vatSS)))

def get_CVT2(f, k, M, pr, tauv, vth, c):
    numerator = -((k + f * pr)**2 * (
        (2 * f * k**2 * M**2 * pr**2 * tauv * vth**2) / 
        (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2 + 
        1 / (k + f * pr - (k + f * pr)**3 * tauv**2) * 
        (1 / (2 * k - f * (-2 + pr) * pr) * k * M * pr * 
         (-f * (-2 + pr) * pr + 2 * k * (1 + (-1 + M) * pr)) * 
         ((1 - k * tauv + f * pr * tauv) * (1 + k * tauv + f * pr * tauv) - 
          4 * f * pr * tauv * ((c * f * k * M * pr * tauv) / 
                               (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
          (c**2 * f**2 * k**2 * M**2 * pr**2 * tauv**2 * 
           (1 + k * tauv - f * pr * tauv) * 
           (-1 + k * tauv + f * pr * tauv)) / 
          (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2) + 
         2 * f * k * M * pr**2 * tauv * 
         (((2 * k * M - f * (-2 + pr) * pr) * 
           (-1 - (k + f * pr) * tauv + 
            2 * ((c * f * k * M * pr * tauv) / 
                 (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
            (c**2 * f**2 * k**2 * M**2 * pr**2 * tauv**2 * 
             (-1 + k * tauv + f * pr * tauv)) / 
            (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2)) / 
         (2 * k - f * (-2 + pr) * pr) + 
         1 / (k + f * pr) * 
         k * M * ((k + f * pr) * tauv * 
                  (1 + k * tauv + f * pr * tauv) - 
                  2 * ((c * f * k * M * pr * tauv) / 
                       (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
                  (c**2 * f**2 * k**2 * M**2 * pr**2 * 
                   (k + f * pr) * tauv**3 * 
                   (-1 + k * tauv + f * pr * tauv)) / 
                  (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2 + 
                  (2 * c * f * k * M * pr * tauv * 
                   (1 - (k + f * pr)**2 * tauv**2)) / 
                  (c * f * k * M * pr * tauv - (k + f * pr) * vth))))))

    denominator = 2 * f * k**2 * M**2 * pr**2 * tauv * np.log(
        (c * f * k * M * pr * tauv) / (c * f * k * M * pr * tauv - (k + f * pr) * vth))**2

    result = numerator / denominator

    return result

def get_equations(f, run_time, c, M, k, pr, tauv, vth, delta_t, Hx, cx, x0, x1, xname):
    

    if xname == 'k':
        k = get_hill(f, x0, x1, Hx, cx)
    if xname == 'pr':
        pr = get_hill(f, x0, x1, Hx, cx)
    if xname == 'M':
        M = get_hill(f, x0, x1, Hx, cx)
    if xname == 'c':
        c = get_hill(f, x0, x1, Hx, cx)
    
    T_mean = get_T_mean(f, tauv, vth, c, pr, k, M)
    CVT2 = get_CVT2(f, k, M, pr, tauv, vth, c)
    

    return T_mean, CVT2

###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

# Values of c to test
fmin = 0
fmax = 50
n_samples = 200
f_val_list = np.linspace(fmin,fmax, n_samples)

run_time = 60*10

##########################
#Defaults, must be defined
M = 100
pr = 0.3
c = 0.015
k = 100
tauv = 1
vth = 0.2
##########################

# =============================================================================
# xname = 'M'
# pr = 0.2
# c = 0.01 # 0.01
# k = 50 # 50
# tauv = 1.9 # 10, 4.5, 1.9
# vth = 0.15
# x0=200
# x1=0
# Hx = 1.2 #1.2
# cx = 1 #1
# =============================================================================

# =============================================================================
# xname = 'c'
# M = 100
# pr = 0.25 # 0.3
# k = 100 # 100
# tauv = 2
# vth = 0.2
# 
# 
# x0=0.01
# x1=0
# Hx = 1.5
# cx = 4
# =============================================================================


xname = 'k'
M = 100
pr = 0.2
c = 0.003
tauv = 5
vth = 0.2

x0=100
x1=0
Hx = 1.7
cx = 1

# =============================================================================
# xname = 'pr'
# M = 100
# c = 0.005
# k = 100
# tauv = 1
# vth = 0.2
# 
# x0=0.2
# x1=0
# Hx = 2
# cx = 10
# =============================================================================

delta_t = 0.01

    # Simulations
# mean_T_sim = []
# CVT2_sim = []

# for i, f_val in enumerate(f_val_list):
# # =============================================================================
# #         print(i/len(f_val_list))
# # =============================================================================

#     result = run_test(f_val, run_time, c, M, k, pr, tauv, vth, delta_t, Hx, cx, x0, x1, xname)
#     mean_T_sim.append(result[0])
#     CVT2_sim.append(result[1])
    
# Equations

mean_T_eq = []
CVT2_eq = []
pf_eq = []

for f_val in f_val_list:
    T_mean_eq_val, CVT2T_eq_val = get_equations(f_val, run_time, c, M, k, pr, tauv, vth, delta_t, Hx, cx, x0, x1, xname)
    mean_T_eq.append(T_mean_eq_val)
    CVT2_eq.append(CVT2T_eq_val)

# mean_T_sim = np.array(mean_T_sim)
mean_T_eq = np.array(mean_T_eq)
# CVT2_sim = np.array(CVT2_sim)
CVT2_eq = np.array(CVT2_eq)
F=1/np.array(mean_T_eq)

fs=20
plt.subplot(1,2,1)
plt.plot(f_val_list, F, label='k(f) hill function', linewidth=2)
plt.plot(f_val_listO, Fo, label=r'$k=5$ $sec^{{-1}}$ ', linewidth=2)
plt.legend(loc='center right',fontsize=fs-5)
plt.xlabel('input frequency', fontsize=fs)
plt.ylabel('mean output frequency',fontsize=fs)
plt.tick_params(axis='both', labelsize=fs)
plt.ylim([0,5])

plt.subplot(1,2,2)
plt.plot(f_val_list, [get_hill(f, x0, x1, Hx, cx) for f in f_val_list], linewidth=2, color='green')
plt.xlabel('input frequency', fontsize=fs)
plt.ylabel('excitatory refilling rate',fontsize=fs)
plt.tick_params(axis='both', labelsize=fs)


plt.show()
