import numpy as np
import matplotlib.pyplot as plt

def get_time_to(text, args, n1, n2):
    
    if text == 'f':
        return np.random.exponential(1./args['f'])
    
    if text == 'pf':
        pi = get_pi(args['f'], args['c1'], args['k1'], args['M1'], args['p1'], args['vth'], args['tauv'])
        return np.random.exponential(1./(args['f']*pi))
# =============================================================================
#         return np.random.exponential(1./(args['f']*get_pi(args['f'], args['c1'], args['k1'], args['M1'], args['p1'], args['vth'], args['tauv'])))
# =============================================================================
    
    if text == 'n1':
        M1 = args['M1']
        k1 = args['k1']
        
        if M1 > n1:
            return np.random.exponential(1./(k1*(M1-n1)))
        else:
            return np.inf

    if text == 'n2':
        M2 = args['M2']
        k2 = args['k2']
        if M2 > n2:
            return np.random.exponential(1./(k2*(M2-n2)))
        else:
            return np.inf

def get_arg_typi(i):

    if i == 0:
        return 'f'
    if i == 1:
        return 'pf'
    if i == 2:
        return 'n1'
    if i == 3:
        return 'n2'
    else:
        return 'measure'

def to_dict(**x):
    return x

def run_test(args):

    run_time = args['run_time']
    
    M1 = args['M1']
    M2 = args['M2']
    
    c1 = args['c1']
    c2 = args['c2']
    
    p1 = args['p1']
    p2 = args['p2']
    
    tauv = args['tauv']
    vth = args['vth']

    delta_t = args['delta_t']
        
    current_time = 0
    v_membrane = 0

    n1 = 0
    n2 = 0

    v_history = [[0, current_time]] # data array
    AP_times = []

    preneuron_firing_history = []
    
    t_measure = delta_t
    
    while current_time < run_time:
        
        time_to_f = get_time_to('f', args, n1, n2) # next reaction time
        time_to_pf = get_time_to('pf', args, n1, n2)
        time_to_n1 = get_time_to('n1', args, n1, n2)
        time_to_n2 = get_time_to('n2', args, n1, n2)
            
        times_array = np.array([time_to_f, time_to_pf, time_to_n1, time_to_n2, t_measure])
    
        t_min_arg = np.argmin(times_array)
        arg_typi = get_arg_typi(t_min_arg)
        t_min = times_array[t_min_arg]

        if arg_typi == 'f':

            preneuron_firing_history.append(current_time)

            b1 = np.random.binomial(n1, p1) # Number released

            voltage_addition = c1*b1

            if (b1 > 0) and (n1 >= b1):
                n1 -= b1

            v_membrane += voltage_addition
            v_history.append([v_membrane, current_time])
            
            if v_membrane >= vth:
                v_membrane = 0
                AP_times.append(current_time)

            current_time += t_min
            t_measure -= t_min
            
        elif arg_typi == 'pf':

            preneuron_firing_history.append(current_time)

            b2 = np.random.binomial(n2, p2) # Number released

            voltage_addition = - c2*b2

            if (b2 > 0) and (n2 >= b2):
                n2 -= b2

            v_membrane += voltage_addition
            v_history.append([v_membrane, current_time])

            current_time += t_min
            t_measure -= t_min

        elif arg_typi == 'n1':
            
            if n1 < M1:
                n1 += 1
            
            current_time += t_min
            t_measure -= t_min
            
        elif arg_typi == 'n2':
            
            if n2 < M2:
                n2 += 1            
            
            current_time += t_min
            t_measure -= t_min
            
        else:
            v_membrane = v_membrane*np.exp(-t_min/tauv)
            
            v_history.append([v_membrane, current_time])
    
            current_time += t_min
            t_measure = delta_t
            
    v_history = np.array(v_history) # data array
    AP_times = np.array(AP_times)
    
    inter_AP_times = np.diff(AP_times)
    if len(inter_AP_times) < 2:
        mean_inter_AP_time = np.nan
        CVT2 = np.nan
    else:
        mean_inter_AP_time = np.mean(inter_AP_times)
        CVT2 = np.var(inter_AP_times) / mean_inter_AP_time**2
    
    return {'v_history': np.array(v_history),
            'AP_times':np.array(AP_times),
            'inter_AP_times':np.array(inter_AP_times),
            'mean_T':mean_inter_AP_time, 
            'CVT2':CVT2}

def get_pi(f, c1, k1, M1, p1, vth, tauv):
# =============================================================================
#     return tauv * np.log(1/(1-(((k1 + f * p1)*vth)/(c1 * f*k1*M1*p1*tauv))))
# =============================================================================
    return 1

def get_T_mean(f, c1, c2, k1, k2, M1, M2, p1, p2, tauv, vth):
    pi = get_pi(f, c1, k1, M1, p1, vth, tauv)
    b1ss = p1*k1*M1/(k1 + f*p1 + f*p1*pi)
    b2ss = p2*(k2*M2)/(k2 + f*p2*pi)
    vat = (1 + pi)*c1*f*b1ss - c2*f*b2ss*pi
    return tauv * np.log(1 / (1 - vth / (vat * tauv)))

# =============================================================================
# def get_CVT2(f, c1, c2, M1, M2, k1, k2, p1, p2, cp, Hp, pmin, tauv, vth):
#     
#     bMeanSS = (c1 * k1 * M1 * p1) / (k1 + f * p1) - (
#         c2 * k2 * M2 * p2 * ((cp * f)**Hp + pmin)) / ((1 + (cp * f)**Hp) * (k2 + f * p2))
# 
#     bSquaredMeanSS = -((c1**2 * k1 * M1 * (-1 + p1) * p1) / (k1 + f * p1)) - \
#          ((c2**2 * k2 * M2 * (-1 + p2) * p2 * ((cp * f)**Hp + pmin)) / (k2 + f * p2)) + \
#          ((c1 * k1 * M1 * p1) / (k1 + f * p1) - (c2 * k2 * M2 * p2 * ((cp * f)**Hp + pmin)) / (k2 + f * p2))**2
# 
#     CVT2 = -((vth * (vth - 2 * f * tauv * bMeanSS) * bSquaredMeanSS) / (
#         2 * f * tauv * bMeanSS**2 * (vth - f * tauv * bMeanSS)**2 * np.log(1 + vth / (-vth + f * tauv * bMeanSS))**2))
#     return CVT2
# =============================================================================

def get_CVT2(f, c1, p1, k1, M1, c2, p2, k2, M2, vth, tauv):
    # Intermediate calculations
    pi = get_pi(f, c1, k1, M1, p1, vth, tauv)

    b1MeanSS = p1 * k1 * M1 / (f * p1 + k1)
    b2MeanSS = p2 * k2 * M2 / (f * p2 + k2)

    bMeanSS = c1 * p1 * k1 * M1 / (f * p1 + k1) - c2 * p2 * k2 * M2 / (f * p2 + k2) * pi

    bVarianceSS = c1**2 * (1 - p1) * b1MeanSS + c2**2 * pi * (1 - p2) * b2MeanSS

    bSquaredMeanSS = bVarianceSS + bMeanSS**2

    # Main expression
    numerator = vth * (-2 * f * tauv * vth * bMeanSS**2 + (-1 + 2 * f * tauv) * vth * bSquaredMeanSS + 2 * f * tauv * bMeanSS * bSquaredMeanSS)
    denominator = 2 * f * tauv * bMeanSS**2 * (vth - f * tauv * bMeanSS)**2 * np.log(1 + vth / (-vth + f * tauv * bMeanSS))**2
    result = numerator / denominator
    
    return result

def get_equations(f, params):
    
    M1 = params['M1']
    M2 = params['M2']

    p1 = params['p1']
    p2 = params['p2']
    
    c1 = params['c1']
    c2 = params['c2']

    k1 = params['k1']
    k2 = params['k2']

    tauv = params['tauv']
    vth = params['vth']

    T_mean = get_T_mean(f, c1, c2, k1, k2, M1, M2, p1, p2, tauv, vth)

# =============================================================================
#     CVT2 = get_CVT2(f, c1, p1, k1, M1, c2, p2, k2, M2, cp, Hp, pmin, vth, tauv)
# =============================================================================
    
    CVT2 = 1

    return T_mean, CVT2

def get_stats(f, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tauv, vth, delta_t):
    params = to_dict(run_time = run_time, f = f, M1 = M1, M2 = M2,
                     p1 = p1, p2 = p2, c1 = c1, c2 = c2, k1 = k1,
                     k2 = k2, tauv = tauv, vth = vth, delta_t = delta_t)  
    result = run_test(params)

    mean_T_sim=result['mean_T']
    CVT2_sim=result['CVT2']
    pf_sim=1/(f*result['mean_T'])
    
# =============================================================================
#     pf = get_pi(f, c1, k1, M1, p1, vth, tauv)
# =============================================================================
    params = to_dict(run_time = run_time, f = f, M1 = M1, M2 = M2,
                     p1 = p1, p2 = p2, c1 = c1, c2 = c2, k1 = k1,
                     k2 = k2, tauv = tauv, vth = vth, delta_t = delta_t)  
    T_mean_eq_val, CVT2_eq_val = get_equations(f, params)
    pf_eq=1/(f*T_mean_eq_val)

    return mean_T_sim, T_mean_eq_val, CVT2_sim, CVT2_eq_val, pf_sim, pf_eq

def get_rval(ts):
    tmax = np.max([x for x in ts if np.isnan(x) == False])
    tlast = ts[-1]
    rval = (tmax-tlast)/tmax
    return rval

###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

#######################
# Defaults
run_time = 15

p1 = 0.2 # 0.2
p2 = 0.2 # 0.02

M1 = 50 # 100
M2 = 50 # 100

c1 = 0.01 # 0.01
c2 = 0.01 # 0.01

k1 = 1 # 1
k2 = 100 # 10

tauv = 1 # 1
vth = 0.2 #0.2
delta_t = 0.01

fmax=100
flen=50
fvals = np.linspace(0,fmax,flen)

# heatmap of pf for vth vs f
xn='k1'
xmin=1
xmax=100
xlen=10

yn = 'k2'
ymin=1
ymax=100
ylen=10

xs=np.linspace(xmin,xmax,xlen)
ys=np.linspace(ymin,ymax,ylen)

dt = []
dc = []
for i, x in enumerate(xs): # modify here j, X <--
    print(i/xlen)

    for j, y in enumerate(ys):
        print('j', j/len(ys))
        
        if xn == 'k1':
            k1 = x
        if yn == 'k1':
            k1 = y
        
        if xn == 'k2':
            k2 = x
        if yn == 'k2':
            k2 = y
        
        if xn == 'p1':
            p1 = x
        if yn == 'p1':
            p1 = y
        
        if xn == 'p2':
            p2 = x
        if yn == 'p2':
            p2 = y
        
        if xn == 'M1':
            M1 = x
        if yn == 'M1':
            M1 = y
        
        if xn == 'M2':
            M2 = x
        if yn == 'M2':
            M2 = y
        
        if xn == 'c1':
            c1 = x
        if yn == 'c1':
            c1 = y
        
        if xn == 'c2':
            c2 = x
        if yn == 'c2':
            c2 = y
            
        if xn == 'tauv':
            tauv = x
        if yn == 'tauv':
            tauv = y
        
        if xn == 'vth':
            vth = x
        if yn == 'vth':
            vth = y
        
        Tmeans = []
        
        for f in fvals:
            data = get_stats(f, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tauv, vth, delta_t)
            mean_T_sim, mean_T_eq, CVT2_sim, CVT2_eq, pf_sim, pf_eq = data
            Tmeans.append(mean_T_sim)
            
        rtval = get_rval(Tmeans)
        
    dt.append(Tmeans)
    dc.append(CVT2s)
    
    

    
    
dtarr=np.array(dt)
dfarr=1/np.array(dt)
            
#%%

# Assuming 'datasets', 'f_vals', and 'xs' are defined

num_ticks = 5
x_tick_locs = np.linspace(min(f_vals), max(f_vals), num_ticks)
y_tick_locs = np.linspace(min(xs), max(xs), num_ticks)

fontsize = 20

plt.imshow(datasets, origin='lower', cmap='rainbow', aspect='auto', extent=(min(f_vals), max(f_vals), min(xs), max(xs)), vmin=0, vmax=1)
colorbar = plt.colorbar(orientation='vertical')  # Use orientation='horizontal' for horizontal colorbar

# Rotate colorbar label
colorbar.set_label(f'postsynaptic firing probability', fontsize=fontsize, rotation=270, labelpad=30)  # Adjust rotation and labelpad accordingly
colorbar.ax.tick_params(labelsize=fontsize)

plt.xlabel(f'input frequency $f$, $Hz$', fontsize=fontsize)
plt.ylabel(f'AP-firing threshold $vth$, $volts$', fontsize=fontsize)

# Set the tick locations and labels
plt.xticks(x_tick_locs, fontsize=fontsize)
plt.yticks(y_tick_locs, fontsize=fontsize)

plt.show()
