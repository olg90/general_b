import numpy as np
import matplotlib.pyplot as plt
import sys

from numpy import inf, argmin, array, exp, var, nan, mean, diff, log, linspace
from numpy.random import exponential, binomial

def get_time_to(text, f, k1, M1, c1, p1, n1, k2, M2, n2):
    
    if text == 'f':
        return exponential(1./f)
    
    if text == 'n1':
        if M1 > n1:
            return exponential(1./(k1*(M1-n1)))
        else:
            return inf

    if text == 'n2':
        if M2 > n2:
            return exponential(1./(k2*(M2-n2)))
        else:
            return inf

def get_arg_typi(i):
    
    if i == 0:
        return 'f'
    if i == 1:
        return 'n1'
    if i == 2:
        return 'n2'
    else:
        return 'measure'

def to_dict(**x):
    return x



def run_test(f, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t):
        
    current_time = 0
    
    v2 = 0
    v3 = 0

    n1 = 0
    n2 = 0

    v2_history = [[0, current_time]] # data array
    v3_history = [[0, current_time]] # data array
    
    AP_times2 =  []
    AP_times3 = []

# =============================================================================
#     preneuron_firing_history = []
# =============================================================================

    t_measure = delta_t
    
    while current_time < run_time:
        
        time_to_f = get_time_to('f', f, k1, M1, c1, p1, n1, k2, M2, n2)# next reaction time
        time_to_n1 = get_time_to('n1', f, k1, M1, c1, p1, n1, k2, M2, n2)
        time_to_n2 = get_time_to('n2', f, k1, M1, c1, p1, n1, k2, M2, n2)
            
        #Take min of times array
        times_array = [time_to_f, time_to_n1, time_to_n2, t_measure]
        t_min_arg = argmin(times_array)
        arg_typi = get_arg_typi(t_min_arg)
        t_min = min(times_array)

        if arg_typi == 'f':

            b1 = binomial(n1, p1) # Number released
            if (b1 > 0) and (n1 >= b1):
                n1 -= b1

            vadd123 = c1*b1
                
            v3 += vadd123
            v2 += vadd123

            if v2 >= vth2:
                
                b2 = binomial(n2, p2) # Number released
                if (b2 > 0) and (n2 >= b2):
                    n2 -= b2          
                vadd23 = c2*b2
                v3 -= vadd23
                v2_history.append([v2, current_time])   
                v3_history.append([v3, current_time])
                 
                AP_times2.append([v2,current_time])
                v2 = 0
                if v3>vth3:
                    AP_times3.append([v3,current_time])
                    v3 = 0
                
            else:
                v2_history.append([v2, current_time])                    
                v3_history.append([v3, current_time])
                if v3 > vth3:
                    AP_times3.append([v3, current_time])
                    v3 = 0

        elif arg_typi == 'n1':
            
            if n1 < M1:
                n1 += 1
            
        elif arg_typi == 'n2':
            
            if n2 < M2:
                n2 += 1            
        else:
            v3 = v3*exp(-t_min/tau3)
            v3_history.append([v3, current_time])
            
            v2 = v2*exp(-t_min/tau2)
            v2_history.append([v2, current_time])

        current_time += t_min
        t_measure -= t_min   
        if t_measure == 0:
            t_measure = delta_t
            
    inter_AP_times3 = diff(AP_times3)
    if len(inter_AP_times3) < 2:
        mean_inter_AP_time3 = nan
        CVT23 = nan
    else:
        mean_inter_AP_time3 = mean(inter_AP_times3)
        CVT23 = var(inter_AP_times3) / mean_inter_AP_time3**2

    inter_AP_times2 = diff(AP_times2)
    if len(inter_AP_times2) < 2:
        mean_inter_AP_time2 = nan
        CVT22 = nan
    else:
        mean_inter_AP_time2 = mean(inter_AP_times2)
        CVT22 = var(inter_AP_times2) / mean_inter_AP_time2**2

    return [mean_inter_AP_time3, CVT23, mean_inter_AP_time2, CVT22]

def get_rval(ts):
    a = [x for x in ts if np.isnan(x) == False]
    if len(a) == 0:
        return nan
    else:
        tmax = np.max(a)
        tlast = ts[-1]
        rval = (tmax-tlast)/tmax
        return rval

###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

#######################
# Defaults
run_time = 15

p1 = 0.2 # 0.2
p2 = 0.02 # 0.02

M1 = 100 # 100
M2 = 100 # 100

c1 = 0.01 # 0.01
c2 = 0.01 # 0.01

k1 = 1 # 1
k2 = 100 # 10

tau3 = 1 # 1
vth3 = 0.2 #0.2
tau2 = 1
vth2 = 0.2
delta_t = 0.01

fmax=100
flen=50
fvals = np.linspace(1,fmax,flen)

# heatmap of pf for vth vs f
xn='k1'
yn = 'k2'
xn,xmin,xmax,xlen='k1',1,5,25
yn,ymin,ymax,ylen='k2',1,100,25

xs=np.linspace(xmin,xmax,xlen)
ys=np.linspace(ymin,ymax,ylen)

heatmap = np.zeros((xlen,ylen))
for i, x in enumerate(xs): # modify here j, X <--
    print(i, ' of ', xlen)

    for j, y in enumerate(ys):
        print('\r{:.2f}'.format(j/ylen), end='')
        sys.stdout.flush()
        
        if xn == 'k1':
            k1 = x
        if yn == 'k1':
            k1 = y
        
        if xn == 'k2':
            k2 = x
        if yn == 'k2':
            k2 = y
        
        if xn == 'p1':
            p1 = x
        if yn == 'p1':
            p1 = y
        
        if xn == 'p2':
            p2 = x
        if yn == 'p2':
            p2 = y
        
        if xn == 'M1':
            M1 = x
        if yn == 'M1':
            M1 = y
        
        if xn == 'M2':
            M2 = x
        if yn == 'M2':
            M2 = y
        
        if xn == 'c1':
            c1 = x
        if yn == 'c1':
            c1 = y
        
        if xn == 'c2':
            c2 = x
        if yn == 'c2':
            c2 = y

        if xn == 'tauv':
            tauv = x
        if yn == 'tauv':
            tauv = y

        if xn == 'vth':
            vth = x
        if yn == 'vth':
            vth = y

        t3list=[]
        for f in fvals:
            t3, c3, t2, c2 = run_test(f, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t)
            t3list.append(t3)
        r3 = get_rval(1/array(t3list))
        heatmap[i,j] = r3
    print('')
        
        
#%%
plt.imshow(heatmap, origin='lower', cmap='hot')
plt.colorbar()
plt.xlabel('k1')
plt.ylabel('k2')
plt.show()
            

