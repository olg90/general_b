# Test that models the real thing occcurring
def run_test(f, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t):
    current_time = 0
    v2 = 0
    v3 = 0
    n1 = 0
    n2 = 0
    AP_times3 = []
    t_measure = delta_t
    while current_time < run_time:
        t0=exponential(1./f)
        t1=exponential(1./(k1*(M1-n1)+1e-10))
        t2=exponential(1./(k2*(M2-n2)+1e-10))
        if t0<t1 and t0<t2:
            t_min=t0
            b1 = binomial(n1, p1) # Number released
            n1-=b1
            v3+=c1*b1
            v2+=c1*b1
            if v2 >= vth2:
                b2 = binomial(n2, p2) # Number released
                n2-=b2         
                v3-= c2*b2
                v2 = 0
            if v3>vth3:
                AP_times3.append(current_time)
                v3 = 0
        elif t1<t0 and t1<t2:
            t_min=t1
            if n1 < M1:
                n1+=1
        elif t2<t0 and t2<t1:
            t_min=t2
            if n2 < M2:
                n2+=1          
        else:
            v3*=exp(-t_min/tau3)
            v2*=exp(-t_min/tau2)
        current_time += t_min
        t_measure -= t_min   
        if t_measure == 0:
            t_measure = delta_t
# =============================================================================
#     if len(inter_AP_times3) < 2:
#         mean_inter_AP_time3 = nan
#         CVT23 = nan
#     else:
#         mean_inter_AP_time3 = mean(inter_AP_times3)
#         CVT23 = var(inter_AP_times3) / mean_inter_AP_time3**2
#     return [mean_inter_AP_time3, CVT23]
# =============================================================================
    return mean(diff(AP_times3)[int(0.3*(len(AP_times3)-1)):])
