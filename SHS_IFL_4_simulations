from numpy import inf, argmin,arange, array, exp, var, nan, mean, diff, log, linspace, isnan
from numpy.random import exponential, binomial

import matplotlib.pyplot as plt

def get_time_to(text, f, k1, M1, n1, k2, M2, n2):
    
    if text == 'f':
        return exponential(1./f)
    
    if text == 'n1':
        if M1 > n1:
            return exponential(1./(k1*(M1-n1)+1e-10))
        else:
            return inf
        
    if text == 'n2':
        if M2 > n2:
            return exponential(1./(k2*(M2-n2))+1e-10)
        else:
            return inf
        
def get_arg_typi(i):
    
    if i == 0:
        return 'f'
    if i == 1:
        return 'n1'
    if i == 2:
        return 'n2'
    else:
        return 'measure'

def to_dict(**x):
    return x

def run_test(f, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t):
    current_time = 0
    v2 = 0
    v3 = 0
    n1 = 0
    n2 = 0
    AP_times3 = []
    t_measure = delta_t
    while current_time < run_time:
        t0=exponential(1./f)
        t1=exponential(1./(k1*(M1-n1)+1e-10))
        t2=exponential(1./(k2*(M2-n2)+1e-10))
        if t0<t1 and t0<t2:
            t_min=t0
            b1 = binomial(n1, p1) # Number released
            n1-=b1
            v3+=c1*b1
            v2+=c1*b1
            if v2 >= vth2:
                b2 = binomial(n2, p2) # Number released
                n2-=b2         
                v3-= c2*b2
                v2 = 0
            if v3>vth3:
                AP_times3.append(current_time)
                v3 = 0
        elif t1<t0 and t1<t2:
            t_min=t1
            if n1 < M1:
                n1+=1
                
        elif t2<t0 and t2<t1:
            t_min=t2
            if n2 < M2:
                n2+=1          
        else:
            v3*=exp(-t_min/tau3)
            v2*=exp(-t_min/tau2)
        current_time += t_min
        t_measure -= t_min   
        if t_measure == 0:
            t_measure = delta_t
# =============================================================================
#     if len(inter_AP_times3) < 2:
#         mean_inter_AP_time3 = nan
#         CVT23 = nan
#     else:
#         mean_inter_AP_time3 = mean(inter_AP_times3)
#         CVT23 = var(inter_AP_times3) / mean_inter_AP_time3**2
#     return [mean_inter_AP_time3, CVT23]
# =============================================================================
    return mean(diff(AP_times3))

def get_fs(flist, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t):
    t3=[]
    i=0
    for i in range(len(flist)):
# =============================================================================
#         print('\r{:.2f}'.format(i/nsamples), end='')
#         sys.stdout.flush()
# =============================================================================
        results = run_test(flist[i], run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t)
        t3.append(results)
# =============================================================================
#     print('')
# =============================================================================

    f3=1/array(t3)
    return f3

def get_rval(ts):
    a = [x for x in ts if isnan(x) == False]
    if len(a) == 0:
        return nan
    else:
        rval = 1-a[-1]/max(a)
        return rval

def rtest(xn, xs, p1, p2, M1,M2,c1,c2,k1,k2,tau2,tau3,vth2,vth3,delta_t,fmax,nsamples):
    
    rvals=[]
    for i,x in enumerate(xs):
        print(i, 'of', xlen)
        if xn == 'k1':
            k1 = x
        elif xn == 'k2':
            k2 = x
        elif xn == 'p1':
            p1 = x
        elif xn == 'p2':
            p2 = x
        elif xn == 'M1':
            M1 = x
        elif xn == 'M2':
            M2 = x
        elif xn == 'c1':
            c1 = x
        elif xn == 'c2':
            c2 = x
        elif xn == 'tau3':
            tau3 = x
        elif xn == 'tau2':
            tau2 = x
        elif xn == 'vth3':
            vth3 = x
        else:
            vth2 = x
        f3 = get_fs(flist, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t)
        rval = get_rval(f3)
        rvals.append(rval)
    return rvals
    
###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

#######################
run_time = 15

p1 = 1 # 0.2
p2 = 1 # 0.02

M1 = 100 # 100
M2 = 100 # 100

c1 = 0.001 # 0.01
c2 = 0.002 # 0.01

k1 = 100 # 1
k2 = 100 # 10

tau2 = 1
tau3 = 1 # 1
vth2 = 0.2
vth3 = 0.2 #0.2
delta_t = 0.01

fmax=500
nsamples=50
flist = linspace(0,fmax,nsamples)

# =============================================================================
# f3 = get_fs(flist, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t)
# r = get_rval(f3)
# plt.plot(flist, f3)
# =============================================================================

yn, ylist='c1', [0.001]
xn,xmin,xmax,xlen='c2', 0, 0.01, 25

# =============================================================================
# xs=arange(xmin,xmax,int(100/xlen))
# =============================================================================

rlist = []
xs=linspace(xmin,xmax,xlen)

for y in ylist:

    if yn == 'k1':
        k1 = y
    if yn == 'k2':
        k2 = y
    if yn == 'p1':
        p1 = y
    if yn == 'p2':
        p2 = y
    if yn == 'M1':
        M1 = y
    if yn == 'M2':
        M2 = y
    if yn == 'c1':
        c1 = y
    if yn == 'c2':
        c2 = y
    if yn == 'tau3':
        tau3 = y
    if yn == 'tau2':
        tau2 = y
    if yn == 'vth3':
        vth3 = y
    if yn == 'vth2':
        vth2 = y
    rlist.append(rtest(xn, xs, p1, p2, M1, M2, c1, c2, k1, k2, tau2, 
                       tau3, vth2, vth3, delta_t, fmax, nsamples))

fontsize = 20
plt.figure()
plt.ylabel('band-pass \ndrop percentage', fontsize=fontsize)
for i in range(len(rlist)):
    plt.plot(xs,rlist[i], label='{}={}'.format(yn, ylist[i]))
    

plt.xlabel(xn)
plt.legend(loc='upper right')
plt.show()


