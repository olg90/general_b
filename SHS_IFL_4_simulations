from numpy import inf, argmin, array, exp, var, nan, mean, diff, log, linspace, isnan
from numpy.random import exponential, binomial
import sys

import matplotlib.pyplot as plt

def get_time_to(text, f, k1, M1, n1, k2, M2, n2):
    
    if text == 'f':
        return exponential(1./f)
    
    if text == 'n1':
        if M1 > n1:
            return exponential(1./(k1*(M1-n1)))
        else:
            return inf
        
    if text == 'n2':
        if M2 > n2:
            return exponential(1./(k2*(M2-n2)))
        else:
            return inf
        
def get_arg_typi(i):
    
    if i == 0:
        return 'f'
    if i == 1:
        return 'n1'
    if i == 2:
        return 'n2'
    else:
        return 'measure'

def to_dict(**x):
    return x

def run_test(f, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t):
        
    current_time = 0
    
    v2 = 0
    v3 = 0

    n1 = 0
    n2 = 0

    v2_history = [[0, current_time]] # data array
    v3_history = [[0, current_time]] # data array
    
    AP_times2 =  []
    AP_times3 = []

    t_measure = delta_t
    
    while current_time < run_time:
        
        time_to_f = get_time_to('f', f, k1, M1, n1, k2, M2, n2) # next reaction time
        time_to_n1 = get_time_to('n1', f, k1, M1, n1, k2, M2, n2)
        time_to_n2 = get_time_to('n2', f, k1, M1, n1, k2, M2, n2)
            
        #Take min of times array
        times_array = [time_to_f, time_to_n1, time_to_n2, t_measure]
        t_min_arg = argmin(times_array)
        arg_typi = get_arg_typi(t_min_arg)
        t_min = times_array[t_min_arg]

        if arg_typi == 'f':

            b1 = binomial(n1, p1) # Number released
            n1 -= b1

            vadd123 = c1*b1
                
            v3 += vadd123
            v2 += vadd123

            if v2 >= vth2:
                
                b2 = binomial(n2, p2) # Number released
                if (b2 > 0) and (n2 >= b2):
                    n2 -= b2          
                vadd23 = c2*b2
                v3 -= vadd23
                v2_history.append([v2, current_time])   
                v3_history.append([v3, current_time])
                 
                AP_times2.append([v2,current_time])
                v2 = 0
                if v3>vth3:
                    AP_times3.append([v3,current_time])
                    v3 = 0
                    
                
            else:
                
                v2_history.append([v2, current_time])                    
                v3_history.append([v3, current_time])
                if v3 > vth3:
                    AP_times3.append([v3, current_time])
                    v3 = 0

        elif arg_typi == 'n1':
            
            if n1 < M1:
                n1 += 1
            
        elif arg_typi == 'n2':
            if n2 < M2:
                n2 += 1            
        else:
            v3 = v3*exp(-t_min/tau3)
            v3_history.append([v3, current_time])
            
            v2 = v2*exp(-t_min/tau2)
            v2_history.append([v2, current_time])
            
        current_time += t_min
        t_measure -= t_min   
        if t_measure == 0:
            t_measure = delta_t
            
            
    inter_AP_times3 = diff(AP_times3)
    if len(inter_AP_times3) < 2:
        mean_inter_AP_time3 = nan
        CVT23 = nan
    else:
        mean_inter_AP_time3 = mean(inter_AP_times3)
        CVT23 = var(inter_AP_times3) / mean_inter_AP_time3**2
        
    inter_AP_times2 = diff(AP_times2)
    if len(inter_AP_times2) < 2:
        mean_inter_AP_time2 = nan
        CVT22 = nan
    else:
        mean_inter_AP_time2 = mean(inter_AP_times2)
        CVT22 = var(inter_AP_times2) / mean_inter_AP_time2**2
        
    return [mean_inter_AP_time3, CVT23, mean_inter_AP_time2, CVT22]

def get_fs(flist, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t):
    t3=[]
    i=0
    for i in range(len(flist)):
        print('\r{:.2f}'.format(i/nsamples), end='')
        sys.stdout.flush()
        results = run_test(flist[i], run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t)
        t3.append(results[0])
    print('')

    f3=1/array(t3)
    return f3

def get_rval(ts):
    a = [x for x in ts if isnan(x) == False]
    if len(a) == 0:
        return nan
    else:
        tmax = max(a)
        tlast = ts[-1]
        rval = (tmax-tlast)/tmax
        return rval
    
###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

#######################
run_time = 60

p1 = 0.2 # 0.2
p2 = 0.02 # 0.02

M1 = 100 # 100
M2 = 100 # 100

c1 = 0.001 # 0.01
c2 = 0 # 0.01

k1 = 5 # 1
k2 = 10 # 10

tau2 = 1
tau3 = 10 # 1
vth2 = 0.2
vth3 = 0.07 #0.2
delta_t = 0.01

fmax=100
nsamples=100
flist = linspace(0,fmax,nsamples)

f3 = get_fs(flist, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t)
plt.plot(flist, f3)



# =============================================================================
# xn,xmin,xmax,xlen='vth2',0.001,0.2,50
# xs=linspace(xmin,xmax,xlen)
# rvals=[]
# for i,x in enumerate(xs):
#     print(i, 'of', xlen)
#     if xn == 'k1':
#         k1 = x
#     if xn == 'k2':
#         k2 = x
#     if xn == 'p1':
#         p1 = x
#     if xn == 'p2':
#         p2 = x
#     if xn == 'M1':
#         M1 = x
#     if xn == 'M2':
#         M2 = x
#     if xn == 'c1':
#         c1 = x
#     if xn == 'c2':
#         c2 = x
#     if xn == 'tau3':
#         tauv = x
#     if xn == 'tau2':
#         tauv = x
#     if xn == 'vth3':
#         vth = x
#     if xn == 'vth2':
#         vth = x
#     f3 = get_fs(flist, run_time, c1, M1, k1, p1, c2, k2, M2, p2, tau2, tau3, vth2, vth3, delta_t)
#     rval = get_rval(f3)
#     rvals.append(rval)
# =============================================================================


#%%
fontsize=20
plt.plot(xs, rvals, label='r-value')
plt.xlabel('{}'.format(xn), fontsize=fontsize)
plt.ylabel(f'band-pass \ndrop percentage', fontsize=fontsize)
plt.tick_params(axis='both', labelsize = fontsize)
plt.show()
 


