import numpy as np
import matplotlib.pyplot as plt

def get_time_to(text, args, n1, n2, k1, k2):
    
    if text == 'f1':
        return np.random.exponential(1./args['f1'])
    
    if text == 'f2':
        return np.random.exponential(1./args['f2'])
    
    if text == 'n1':
        M1 = args['M1']
        
        if M1 > n1:
            return np.random.exponential(1./(k1*(M1-n1)))
        else:
            return np.inf
        
    if text == 'n2':
        M2 = args['M2']
        if M2 > n2:
            return np.random.exponential(1./(k2*(M2-n2)))
        else:
            return np.inf
        
def get_arg_type(i):
    
    if i == 0:
        return 'f1'
    if i == 1:
        return 'f2'
    if i == 2:
        return 'n1'
    if i == 3:
        return 'n2'
    else:
        return 'measure'

def to_dict(**x):
    return x

def run_test(args):
    
    run_time = args['run_time']
    
    f1 = args['f1']
    f2 = args['f2']
    
    M1 = args['M1']
    M2 = args['M2']
    
    c1 = args['c1']
    c2 = args['c2']
    
    k1s = args['k1s']
    k1e = args['k1e']
    
    k2s = args['k2s']
    k2e = args['k2e']
    
    ck1 = args['ck1']
    ck2 = args['ck2']
    
    Hk1 = args['Hk1']
    Hk2 = args['Hk2']
    
    k1 = (k1e * (ck1 * f1) ** Hk1 + k1s) / (1 + (ck1 * f1) ** Hk1)
    k2 = (k2e * (ck2 * f2) ** Hk2 + k2s) / (1 + (ck2 * f2) ** Hk2)
    

    tauv = args['tauv']
    vth = args['vth']

    delta_t = args['delta_t']
    
    current_time = 0
    v_membrane = 0
    
    n1 = 0
    n2 = 0
    
    v_history = [[0, current_time]] # data array
    AP_times = []

    preneuron_firing_history = []
    
    t_measure = delta_t
    
    while current_time < run_time:
        
        time_to_f1 = get_time_to('f1', args, n1, n2, k1, k2) # next reaction time
        time_to_f2 = get_time_to('f2', args, n1, n2, k1, k2) # next reaction time
        time_to_n1 = get_time_to('n1', args, n1, n2, k1, k2)
        time_to_n2 = get_time_to('n2', args, n1, n2, k1, k2)
            
        times_array = np.array([time_to_f1, time_to_f2, time_to_n1, time_to_n2, t_measure])
    
        t_min_arg = np.argmin(times_array)
        arg_type = get_arg_type(t_min_arg)
        t_min = times_array[t_min_arg]
    
        if arg_type == 'f1':
            
            preneuron_firing_history.append(current_time)

            b1 = np.random.binomial(n1, p1) # Number released
            if b1 > 0:
                n1 -= b1
                
            voltage_addition = c1*b1
            v_membrane += voltage_addition
            v_history.append([v_membrane, current_time])
            
            if v_membrane >= vth:
                v_membrane = 0
                AP_times.append(current_time)

            current_time += t_min
            t_measure -= t_min
            
        elif arg_type == 'f2':
            preneuron_firing_history.append(current_time)

            b2 = np.random.binomial(n2, p2) # Number released
            if b2 > 0:
                n2-= b2
            voltage_addition = -c2*b2
            v_membrane += voltage_addition
            v_history.append([v_membrane, current_time])
            
            if v_membrane >= vth:
                v_membrane = 0
                AP_times.append(current_time)

            current_time += t_min
            t_measure -= t_min

        elif arg_type == 'n1':
            
            if n1 < M1:
                n1 += 1            
            
            current_time += t_min
            t_measure -= t_min
            
        elif arg_type == 'n2':
            
            if n2 < M2:
                n2 += 1            
            
            current_time += t_min
            t_measure -= t_min
            

        else:
            v_membrane = v_membrane*np.exp(-t_min/tauv)
            v_history.append([v_membrane, current_time])
    
            current_time += t_min
            t_measure = delta_t
            
    v_history = np.array(v_history) # data array
    AP_times = np.array(AP_times)
    
    inter_AP_times = np.diff(AP_times)
    if len(inter_AP_times) < 2:
        mean_inter_AP_time = np.nan
        CVT2 = np.nan
    else:
        mean_inter_AP_time = np.mean(inter_AP_times)
        CVT2 = np.var(inter_AP_times) / mean_inter_AP_time**2
    
    return {'v_history': np.array(v_history),
            'AP_times':np.array(AP_times),
            'inter_AP_times':np.array(inter_AP_times),
            'mean_T':mean_inter_AP_time, 
            'CVT2':CVT2}

# =============================================================================
# def get_T_mean(p1e, cp1, f1, Hp1, p1s, k1, p2e, cp2, f2, Hp2, p2s, k2, c1, M1, c2, M2, vth, tauv):
#     
#     p1 = (p1e * (cp1 * f1)**Hp1 + p1s) / (1 + (cp1 * f1)**Hp1)
#     p2 = (p2e * (cp2 * f2)**Hp2 + p2s) / (1 + (cp2 * f2)**Hp2)
#     
#     b1MeanSS = p1 * k1 * M1 / (f1 * p1 + k1)
#     b2MeanSS = p2 * k2 * M2 / (f2 * p2 + k2)
#         
#     Tmean = tauv * np.log(1 / (1 - vth / (tauv * (c1 * f1 * b1MeanSS - c2 * f2 * b2MeanSS))))
# 
#     return Tmean
# =============================================================================

def get_T_mean(f1, f2, c1, c2, p1, p2, k1s, k1e, k2s, k2e, M1, M2, ck1, ck2, Hk1, Hk2, vth, tauv):
    k1 = (k1e * (ck1 * f1) ** Hk1 + k1s) / (1 + (ck1 * f1) ** Hk1)
    k2 = (k2e * (ck2 * f2) ** Hk2 + k2s) / (1 + (ck2 * f2) ** Hk2)
    numerator = k1 + f1 * p1
    denominator = -c2 * f2 * k2 * M2 * (k1 + f1 * p1) * p2 + c1 * f1 * k1 * M1 * p1 * (k2 + f2 * p2)
    return tauv * np.log(1 / (1 - (numerator * (k2 + f2 * p2) * vth) / (denominator * tauv)))


def get_CVT2(f1, f2, c1, c2, p1, p2, k1s, k1e, k2s, k2e, M1, M2, ck1, ck2, Hk1, Hk2, vth, tauv):
    
    k1 = (k1e * (ck1 * f1) ** Hk1 + k1s) / (1 + (ck1 * f1) ** Hk1)
    k2 = (k2e * (ck2 * f2) ** Hk2 + k2s) / (1 + (ck2 * f2) ** Hk2)
        
    b1MeanSS = p1 * k1 * M1 / (f1 * p1 + k1)
    b2MeanSS = p2 * k2 * M2 / (f2 * p2 + k2)
    
    b1SquaredMeanSS = (1 - p1) * b1MeanSS + b1MeanSS**2
    b2SquaredMeanSS = (1 - p2) * b2MeanSS + b2MeanSS**2
    
    CVT2 = -((vth * (vth - 2 * c1 * f1 * tauv * b1MeanSS + 2 * c2 * f2 * tauv * b2MeanSS) * (
        c1**2 * f1 * b1SquaredMeanSS + c2**2 * f2 * b2SquaredMeanSS
    )) / (2 * tauv * (c1 * f1 * b1MeanSS - c2 * f2 * b2MeanSS)**2 * (
        vth - c1 * f1 * tauv * b1MeanSS + c2 * f2 * tauv * b2MeanSS
    )**2 * np.log(1 - vth / (vth - c1 * f1 * tauv * b1MeanSS + c2 * f2 * tauv * b2MeanSS))**2))
        
    return CVT2

def get_equations(params):
    
    f1 = params['f1']
    f2 = params['f2']
    
    M1 = params['M1']
    M2 = params['M2']

    c1 = params['c1']
    c2 = params['c2']

    k1s = params['k1s']
    k1e = params['k1e']

    k2s = params['k2s']
    k2e = params['k2e']

    ck1 = params['ck1']
    ck2 = params['ck2']

    Hk1 = params['Hk1']
    Hk2 = params['Hk2']

    vth = params['vth']
    tauv = params['tauv']
    
    T_mean = get_T_mean(f1, f2, c1, c2, p1, p2, k1s, k1e, k2s, k2e, M1, M2, ck1, ck2, Hk1, Hk2, vth, tauv)
    
    CVT2 = get_CVT2(f1, f2, c1, c2, p1, p2, k1s, k1e, k2s, k2e, M1, M2, ck1, ck2, Hk1, Hk2, vth, tauv)

    return T_mean, CVT2

###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

# Values of c to test
run_time = 60

M1 = 50
M2 = 200

c1 = 0.01
c2 = 0.001

k1 = 100
k2 = 100

p1 = 0.3
p2 = 0.3

k1s = 100
k1e = 0

k2s = 100
k2e = 0

ck1 = 0.02
ck2 = 0.03

Hk1 = 8
Hk2 = 20

tauv = 0.5
vth = 0.2

delta_t = 0.01

# Simulations

fmax = 100
f_vals = np.arange(1, fmax+1)

mean_T_sim = np.zeros((fmax, fmax))
CVT2_sim = np.zeros_like(mean_T_sim)

iter_range = range(len(f_vals))
for j1, i1 in enumerate(iter_range):
    for j2, i2 in enumerate(iter_range):
    
        f1 = f_vals[i1]
        f2 = f_vals[i2]
        
        params = to_dict(run_time = run_time, f1 = f1, f2 = f2, M1 = M1, M2 = M2,
                         c1 = c1, c2 = c2, k1 = k1, p1 = p1, p2 = p2,
                         k1s = k1s, k1e = k1e, k2s = k2s, k2e = k2e,
                         ck1 = ck1, ck2 = ck2, Hk1 = Hk1, Hk2 = Hk2,
                         tauv = tauv, vth = vth, delta_t = delta_t)
        print(j1/len(iter_range))
    
        result = run_test(params)
    
        mean_T_sim[j1,j2] = result['mean_T']
        CVT2_sim[j1, j2] = result['CVT2']


# Equations
mean_T_eq = np.zeros_like(mean_T_sim)
CVT2_eq = np.zeros_like(mean_T_sim)
print('Equations')


F1, F2 = np.meshgrid(iter_range, iter_range)
mean_T_eq = get_T_mean(F1, F2, c1, c2, p1, p2, k1s, k1e, k2s, k2e, M1, M2, ck1, ck2, Hk1, Hk2, vth, tauv)
CVT2_eq = get_CVT2(F1, F2, c1, c2, p1, p2, k1s, k1e, k2s, k2e, M1, M2, ck1, ck2, Hk1, Hk2, vth, tauv)

def convert_negatives_to_nan(array):
    # Create a copy of the original array to avoid modifying it in-place
    result_array = array.copy()

    # Replace negative values with NaN
    result_array[result_array < 0] = np.nan
    
    return result_array
    
ignore_negatives = 1
if ignore_negatives == True:
    mean_T_eq = convert_negatives_to_nan(mean_T_eq)
    mean_T_sim = convert_negatives_to_nan(mean_T_sim)
    CVT2_eq = convert_negatives_to_nan(CVT2_eq)
    CVT2_sim = convert_negatives_to_nan(CVT2_sim)   
#%%

fig, ax = plt.subplots(2,2)

mef = (1/mean_T_eq).flatten()
msf = (1/mean_T_sim.flatten())
cef = CVT2_eq.flatten()
csf = CVT2_sim.flatten()

vmaxm = np.max([np.max([x for x in mef if np.isnan(x) == False]), np.max([x for x in msf if np.isnan(x) == False])])
vmaxc= np.max([np.max([x for x in cef if np.isnan(x) == False]), np.max([x for x in csf if np.isnan(x) == False])])

im1 = ax[0,0].imshow(1/mean_T_eq, cmap='viridis', vmin =  0, vmax = vmaxm)
plt.colorbar(im1, label='1/<T_eq>')

im2 = ax[0,1].imshow(1/mean_T_sim.T, cmap='viridis', vmin = 0, vmax = vmaxm)
plt.colorbar(im2, label='1/<T_sim>')

im3 = ax[1,0].imshow(CVT2_eq, cmap='viridis', vmin = 0, vmax = vmaxc)
plt.colorbar(im3, label='CVT2_eq')

im4 = ax[1,1].imshow(CVT2_sim.T, cmap='viridis', vmin = 0, vmax = vmaxc)
plt.colorbar(im4, label='CVT2_sim')

# =============================================================================
# minval = 10
# im3 = ax[1,0].imshow(CVT2_eq*(CVT2_eq < minval), cmap='viridis')
# plt.colorbar(im3, label='CVT2_eq')
# 
# im4 = ax[1,1].imshow(CVT2_sim.T*(CVT2_sim.T < minval), cmap='viridis')
# plt.colorbar(im4, label='CVT2_sim')
# =============================================================================


plt.tight_layout()

plt.show()

#%%

# =============================================================================
# shrinkval = 0.5
# fontsize = 20
# color = 'viridis'
# fig, ax = plt.subplots(1,2)
# 
# vmaxval = np.max([np.max([x for x in 1/mean_T_eq.flatten() if np.isnan(x) == False]), np.max([x for x in 1/mean_T_sim.flatten() if np.isnan(x) == False])])
# 
# im0 = ax[0].imshow(1/mean_T_eq, cmap=color, origin ='lower', vmin = 0, vmax = vmaxval)
# im1 = ax[1].imshow(1/mean_T_sim.T, cmap=color, origin = 'lower', vmin = 0, vmax = vmaxval)
# 
# ax[1].set_yticks([])
# ax[0].set_xlabel(r'                                                  excitatory frequency $f_e$, $(Hz)$', fontsize = fontsize)
# ax[0].set_ylabel(r'inhibitory frequency $f_i$, $Hz$', fontsize = fontsize)
# ax[0].tick_params(axis='both', labelsize = fontsize)
# ax[1].tick_params(axis='both', labelsize = fontsize)
# 
# ax[0].set_title('equation', fontsize = fontsize)
# ax[1].set_title('simulations', fontsize = fontsize)
# 
# cax = fig.add_axes([0.875, 0.2, 0.02, 0.7])  # Adjust these values to position the colorbar
# cbar = fig.colorbar(im1, cax=cax, label = r'output frequency $\langle F \rangle$, $Hz$')
# cbar.ax.tick_params(labelsize=fontsize)
# cbar.ax.set_ylabel(cbar.ax.get_ylabel(), fontsize=fontsize, rotation=-90, labelpad= 30)
# plt.subplots_adjust(top=0.928, bottom=0.155, left=0.084, right=0.875, hspace=0.2, wspace=0.0)
# 
# 
# plt.show()
# 

shrinkval = 0
fontsize = 20
color = 'viridis'
fig, ax = plt.subplots(2,1)

vmaxval = np.max([np.max([x for x in 1/mean_T_eq.flatten() if np.isnan(x) == False]), np.max([x for x in 1/mean_T_sim.flatten() if np.isnan(x) == False])])

im0 = ax[0].imshow(1/mean_T_eq, cmap=color, origin ='lower', vmin = 0, vmax = vmaxval)
im1 = ax[1].imshow(1/mean_T_sim.T, cmap=color, origin = 'lower', vmin = 0, vmax = vmaxval)


ax[1].set_xlabel(r'excitatory frequency $f_e$, $(Hz)$', fontsize = fontsize)
ax[0].set_xticks([])
ax[1].set_ylabel(r'                                    inhibitory frequency $f_i$, $Hz$', fontsize = fontsize)
ax[0].tick_params(axis='both', labelsize = fontsize)
ax[1].tick_params(axis='both', labelsize = fontsize)

ax[0].text(1.05, 0.5, 'equation', transform=ax[0].transAxes, rotation=-90, va='center', ha='left', fontsize=fontsize)
ax[1].text(1.05, 0.5, 'simulations', transform=ax[1].transAxes, rotation=-90, va='center', ha='left', fontsize=fontsize)

cax = fig.add_axes([0.80, 0.2, 0.02, 0.7])  # Adjust these values to position the colorbar
cbar = fig.colorbar(im1, cax=cax, label = r'output frequency $\langle F \rangle$, $Hz$')
cbar.ax.tick_params(labelsize=fontsize)
cbar.ax.set_ylabel(cbar.ax.get_ylabel(), fontsize=fontsize, rotation=-90, labelpad= 30)
plt.subplots_adjust(top=0.928,
    bottom=0.155,
    left=0.029,
    right=0.875,
    hspace=0.2,
    wspace=0.0)
plt.show()

# =============================================================================
# cax = fig.add_axes([0.20, 0.95, 0.60, 0.02])  # Adjust these values to position the colorbar above the plot
# cbar = fig.colorbar(im0, cax=cax, orientation='horizontal', label=r'output frequency $\langle F \rangle$, $Hz$')
# cbar.ax.tick_params(labelsize=fontsize)
# cbar.ax.set_xlabel(cbar.ax.get_xlabel(), fontsize=fontsize, labelpad=10)
# 
# # Add text label above the colorbar
# fig.text(0.85, 0.98, 'Colorbar Label', fontsize=fontsize, ha='center')
# 
# # Adjust the top parameter to make space for the colorbar above the plot
# plt.subplots_adjust(top=0.88, bottom=0.155, left=0.029, right=0.875, hspace=0.2, wspace=0.0)
# 
# plt.show()
# =============================================================================
# =============================================================================
