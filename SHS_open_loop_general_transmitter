import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import bayes_mvs as bayesest

from numpy import inf, argmin, array, exp, var, nan, mean, diff, log, linspace, isnan, zeros, arange
from numpy.random import exponential, binomial

def get_time_to(text, f, ku, Mu, nu):
    
    if text == 'f':
        return np.random.exponential(1./f)
    
    if text == 'nu':
        if Mu > nu:
            return np.random.exponential(1./(ku*(Mu-nu)))
        else:
            return np.inf
        
    
def get_hill(f, x0, x1, Hx, cx):
    return (x1*(f/cx)**Hx+x0)/(1+(f/cx)**Hx)
    

def get_arg_type(i):
    
    if i == 0:
        return 'f'
    if i == 1:
        return 'nu'
    if i == 2:
        return 'measure'

def to_dict(**x):
    return x

def run_test(f, run_time, c, M, k, pr, tau, vth, delta_t, Hx, cx, x0, x1, xname):
       
    current_time = 0
    v = 0
    n = 0

    AP_times = []
    t_measure = delta_t
    while current_time < run_time:
        t0=exponential(1./f)
        t1=exponential(1./(k*(M-n)+1e-10))
        if t0<t1:
            t_min=t0
            b = binomial(n, pr) # Number released
            n-=b
            v+=c*b
            if v>vth:
                AP_times.append(current_time)
                v = 0
        elif t1<t0:
            t_min=t1
            if n < M:
                n+=1
        else:
            v*=exp(-t_min/tau)
        current_time += t_min
        t_measure -= t_min   
        if t_measure == 0:
            t_measure = delta_t
    if len(AP_times) < 2:
        return nan, nan
    else:
        return mean(diff(AP_times)[int(0.4*(len(AP_times))-1):]), \
            var(diff(AP_times)[int(0.4*(len(AP_times))-1):]) / (mean(diff(AP_times)[int(0.4*(len(AP_times))-1):]))**2

def get_T_mean(f, tauv, vth, c, pr, k, M):
    # General equation attempt with p and q

    nMeanSS = k * M / (f * pr + k)
    bMeanSS = pr * nMeanSS
    vatSS = c * bMeanSS
            
    return tauv * np.log(1 / (1 - vth / (f * tauv * vatSS)))

def get_CVT2(f, k, M, pr, tauv, vth, c):
    numerator = -((k + f * pr)**2 * (
        (2 * f * k**2 * M**2 * pr**2 * tauv * vth**2) / 
        (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2 + 
        1 / (k + f * pr - (k + f * pr)**3 * tauv**2) * 
        (1 / (2 * k - f * (-2 + pr) * pr) * k * M * pr * 
         (-f * (-2 + pr) * pr + 2 * k * (1 + (-1 + M) * pr)) * 
         ((1 - k * tauv + f * pr * tauv) * (1 + k * tauv + f * pr * tauv) - 
          4 * f * pr * tauv * ((c * f * k * M * pr * tauv) / 
                               (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
          (c**2 * f**2 * k**2 * M**2 * pr**2 * tauv**2 * 
           (1 + k * tauv - f * pr * tauv) * 
           (-1 + k * tauv + f * pr * tauv)) / 
          (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2) + 
         2 * f * k * M * pr**2 * tauv * 
         (((2 * k * M - f * (-2 + pr) * pr) * 
           (-1 - (k + f * pr) * tauv + 
            2 * ((c * f * k * M * pr * tauv) / 
                 (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
            (c**2 * f**2 * k**2 * M**2 * pr**2 * tauv**2 * 
             (-1 + k * tauv + f * pr * tauv)) / 
            (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2)) / 
         (2 * k - f * (-2 + pr) * pr) + 
         1 / (k + f * pr) * 
         k * M * ((k + f * pr) * tauv * 
                  (1 + k * tauv + f * pr * tauv) - 
                  2 * ((c * f * k * M * pr * tauv) / 
                       (c * f * k * M * pr * tauv - (k + f * pr) * vth))**(1 - (k + f * pr) * tauv) + 
                  (c**2 * f**2 * k**2 * M**2 * pr**2 * 
                   (k + f * pr) * tauv**3 * 
                   (-1 + k * tauv + f * pr * tauv)) / 
                  (c * f * k * M * pr * tauv - (k + f * pr) * vth)**2 + 
                  (2 * c * f * k * M * pr * tauv * 
                   (1 - (k + f * pr)**2 * tauv**2)) / 
                  (c * f * k * M * pr * tauv - (k + f * pr) * vth))))))

    denominator = 2 * f * k**2 * M**2 * pr**2 * tauv * np.log(
        (c * f * k * M * pr * tauv) / (c * f * k * M * pr * tauv - (k + f * pr) * vth))**2

    result = numerator / denominator

    return result

def get_equations(f, run_time, c, M, k, pr, tauv, vth, delta_t, Hx, cx, x0, x1, xname):
    

    if xname == 'k':
        k = get_hill(f, x0, x1, Hx, cx)
    if xname == 'pr':
        pr = get_hill(f, x0, x1, Hx, cx)
    if xname == 'M':
        M = get_hill(f, x0, x1, Hx, cx)
    if xname == 'c':
        c = get_hill(f, x0, x1, Hx, cx)
    
    T_mean = get_T_mean(f, tauv, vth, c, pr, k, M)
    CVT2 = get_CVT2(f, k, M, pr, tauv, vth, c)
    

    return T_mean, CVT2

###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

# Values of c to test
fmin = 0
fmax = 200
n_samples = 100
f_val_list = np.linspace(fmin,fmax, n_samples)

run_time = 15

##########################
#Defaults, must be defined
M = 100
pr = 0.3
c = 0.015
k = 100
tauv = 1
vth = 0.2
##########################

# =============================================================================
# xname = 'M'
# pr = 0.2
# c = 0.01 # 0.01
# k = 50 # 50
# tauv = 1.9 # 10, 4.5, 1.9
# vth = 0.15
# x0=200
# x1=0
# Hx = 1.2 #1.2
# cx = 1 #1
# =============================================================================

xname = 'c'
M = 100
pr = 0.25 # 0.3
k = 100 # 100
tauv = 2
vth = 0.2


x0=0.01
x1=0
Hx = 1.5
cx = 4


# =============================================================================
# xname = 'k'
# M = 100
# pr = 0.2
# c = 0.003
# tauv = 5
# vth = 0.2
# 
# x0=100
# x1=0
# Hx = 1.7
# cx = 1
# =============================================================================

# =============================================================================
# xname = 'pr'
# M = 100
# c = 0.005
# k = 100
# tauv = 1
# vth = 0.2
# 
# x0=0.2
# x1=0
# Hx = 2
# cx = 10
# =============================================================================

delta_t = 0.01

    # Simulations
mean_T_sim = []
CVT2_sim = []

for i, f_val in enumerate(f_val_list):
# =============================================================================
#         print(i/len(f_val_list))
# =============================================================================

    result = run_test(f_val, run_time, c, M, k, pr, tauv, vth, delta_t, Hx, cx, x0, x1, xname)
    mean_T_sim.append(result[0])
    CVT2_sim.append(result[1])
    
# Equations

mean_T_eq = []
CVT2_eq = []
pf_eq = []

for f_val in f_val_list:
    T_mean_eq_val, CVT2T_eq_val = get_equations(f_val, run_time, c, M, k, pr, tauv, vth, delta_t, Hx, cx, x0, x1, xname)
    mean_T_eq.append(T_mean_eq_val)
    CVT2_eq.append(CVT2T_eq_val)
    
mean_T_sim = np.array(mean_T_sim)
mean_T_eq = np.array(mean_T_eq)
CVT2_sim = np.array(CVT2_sim)
CVT2_eq = np.array(CVT2_eq)

fontsize = 15
lw = 2
fig, ax = plt.subplots(1,2)
ax[0].plot(f_val_list, 1/mean_T_sim, label = r'$1/<T>$ simulations', linewidth=lw)
ax[0].plot(f_val_list, 1/mean_T_eq, label = r'$1/<T>$ theoretical', linestyle = '-', linewidth = lw)
ax[0].set_xlabel(r'                                           action potential frequency $f$, $Hz$', fontsize = fontsize)
ax[0].set_ylabel(r'mean output frequency $1/\langle T \rangle$, Hz', fontsize = fontsize)
ax[1].plot(f_val_list, CVT2_sim, label = 'CVT2 simulations', linestyle = '-', linewidth=lw)
ax[1].plot(f_val_list, CVT2_eq, label = 'CVT2 theoretical', linestyle = '-', linewidth = lw)
ax[1].set_ylabel(r'noise $CV_{T}^2$', fontsize = fontsize)
ax[0].tick_params(axis ='both', labelsize = fontsize)
ax[1].tick_params(axis ='both', labelsize = fontsize)
# =============================================================================
# ax[0].set_xlim([0,fmax])
# ax[1].set_xlim([0,fmax])
# =============================================================================

ax[0].plot([], [], ' ', label = r'${}$ as a function of $f$'.format(xname))
ax[1].plot([], [], ' ', label = r'${}$ as a function of $f$'.format(xname))

ax[0].legend(loc = 'upper right', fontsize = fontsize-5, handlelength = 0.5)
ax[1].legend(loc = 'upper right', fontsize = fontsize-5, handlelength = 0.5)

aval = 0.2
ax[0].grid(True, alpha = aval)
ax[1].grid(True, alpha = aval)

plt.tight_layout()
plt.show()
