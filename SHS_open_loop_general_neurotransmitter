from scipy.stats import bayes_mvs as bayesest
from numpy import inf, argmin, array, exp, var, nan, mean, diff, log, linspace, isnan, zeros, arange
from numpy.random import exponential, binomial
import matplotlib.pyplot as plt

def getnextv(t,tauv,d,h,z,v):
    numerator=(exp(-t*(d+1/tauv))*(-exp(t/tauv)*h*tauv*z+exp(d*t)*((-1+d*tauv)*v+h*tauv*z)))
    denominator=(-1+d*tauv)
    return numerator/denominator

def getnextz(t,d,z):
    return exp(-d*t)*z

def run_test(f, run_time, M, k, pr, d, h, m, tau, vth, delta_t):
    
    vhist=[]
    zhist=[]
    thist=[]
    nhist=[]
    current_time = 0
    v = 0
    n = 0
    z = 0
    AP_times = []
    t_measure = delta_t
    while current_time < run_time:
        t0=exponential(1./f)
        t1=exponential(1./(k*(M-n)+1e-10))
        if t0<t1 and t0<t_measure:
            t_min=t0
            b = binomial(n, pr) # Number released
            n-=b
            z+=m*b
            if v>vth:
                AP_times.append(current_time)
                v = 0
        elif t1<t0 and t1<t_measure:
            t_min=t1
            if n < M:
                n+=1
            if v>vth:
                AP_times.append(current_time)
                v = 0
        else:
            v = getnextv(t_measure, tauv, d, h, z, v)
            z = getnextz(t_measure, d, z)
            t_min=t_measure
            if v>vth:
                AP_times.append(current_time)
                v = 0
        vhist.append(v)
        zhist.append(z)
        thist.append(current_time)
        nhist.append(n)        
        current_time += t_min
        t_measure -= t_min
        if t_measure == 0:
            t_measure = delta_t
    if len(AP_times) < 2:
        Tmean = nan
        CVT2 = nan
    else:
        Tmean = mean(diff(AP_times)[int(0.4*(len(AP_times))-1):])
        CVT2 = var(diff(AP_times)[int(0.4*(len(AP_times))-1):]) / (mean(diff(AP_times)[int(0.4*(len(AP_times))-1):]))**2

    return Tmean, CVT2, vhist, zhist, thist, nhist
            
def get_equations(f, M, k, pr, d, h, m, tauv, vth):
    Tmean=tauv*log(1/(1-(d*(k+f*pr)*vth)/(f*h*k*m*M*pr*tauv)))
    CVT2=0
    return Tmean, CVT2

###############################################################################
#
#                               Main Code
#
###############################################################################
# Test 1

# Values of c to test
fmin = 1
fmax = 100
n_samples = 100
f_val_list = linspace(fmin, fmax, n_samples)

run_time = 10

M = 100
k = 1
pr = 0.1
d = 1
h = 1
m = 1
tauv = 0.01
vth = 0.2
f=1

delta_t = 0.001

# =============================================================================
# tm,cv,vh,zh,th,nh =run_test(f, run_time, M, k, pr, d, h, m, tauv, vth, delta_t)
# fig, ax = plt.subplots(1,3, figsize=(10,3))
# ax[0].plot(th,vh, label='v')
# ax[0].legend()
# ax[1].plot(th,zh, label='z')
# ax[1].legend()
# ax[2].plot(th,nh, label='n')
# ax[2].legend()
# plt.show()
# 
# =============================================================================

# Simulations
Tsim = []
CVT2_sim = []

for i, f_val in enumerate(f_val_list):
# =============================================================================
#         print(i/len(f_val_list))
# =============================================================================
    result = run_test(f_val, run_time, M, k, pr, d, h, m, tauv, vth, delta_t)
    Tsim.append(result[0])
    CVT2_sim.append(result[1])

# Equations

Teq = []
CVT2_eq = []
pf_eq = []

for f_val in f_val_list:
    T_mean_eq_val, CVT2T_eq_val = get_equations(f_val, M, k, pr, d, h, m, tauv, vth)
    Teq.append(T_mean_eq_val)
    CVT2_eq.append(CVT2T_eq_val)

Tsim = array(Tsim)
Teq = array(Teq)
CVT2_sim = array(CVT2_sim)
CVT2_eq = array(CVT2_eq)

fontsize = 15
lw = 2
fig, ax = plt.subplots(1,2)
ax[0].plot(f_val_list, 1/Tsim, label = r'$1/<T>$ simulations', linewidth=lw)
ax[0].plot(f_val_list, 1/Teq, label = r'$1/<T>$ theoretical', linestyle = '-', linewidth = lw)
ax[0].set_xlabel(r'                                           action potential frequency $f$, $Hz$', fontsize = fontsize)
ax[0].set_ylabel(r'mean output frequency $1/\langle T \rangle$, Hz', fontsize = fontsize)
ax[1].plot(f_val_list, CVT2_sim, label = 'CVT2 simulations', linestyle = '-', linewidth=lw)
ax[1].plot(f_val_list, CVT2_eq, label = 'CVT2 theoretical', linestyle = '-', linewidth = lw)
ax[1].set_ylabel(r'noise $CV_{T}^2$', fontsize = fontsize)
ax[0].tick_params(axis ='both', labelsize = fontsize)
ax[1].tick_params(axis ='both', labelsize = fontsize)

ax[0].legend(loc = 'upper right', fontsize = fontsize-5, handlelength = 0.5)
ax[1].legend(loc = 'upper right', fontsize = fontsize-5, handlelength = 0.5)

aval = 0.2
ax[0].grid(True, alpha = aval)
ax[1].grid(True, alpha = aval)

plt.tight_layout()
plt.show()
